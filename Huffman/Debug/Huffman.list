
Huffman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003824  08003824  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  0800389c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  0800389c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa12  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfb  00000000  00000000  0002aab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cf9  00000000  00000000  0002d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a756  00000000  00000000  0004f2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d91  00000000  00000000  00059a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a0  00000000  00000000  001237ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003720 	.word	0x08003720

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003720 	.word	0x08003720

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <initialize_huffman_tree>:

//=========================================================================================================//
//                                             Public Functions                                            //
//=========================================================================================================//
struct node* initialize_huffman_tree(uint8_t  i_text[])
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	6018      	str	r0, [r3, #0]
	uint32_t     occurence_character[NB_CHAR_MAX];  // Array which contain all character
	struct node* p_huffman_tree[NB_CHAR_MAX];  // TODO Dynamic allocation
	uint8_t      tree_size  = 0U;             // Size of the tree
 80005b4:	2300      	movs	r3, #0
 80005b6:	f887 380e 	strb.w	r3, [r7, #2062]	; 0x80e
	uint8_t      init_index = 0U;             // loop index used o initialize tab_caractere
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f

	// Initialize tab caractere
	for (init_index = 0; init_index < ARRAY_SIZE; init_index++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
 80005c6:	e00b      	b.n	80005e0 <initialize_huffman_tree+0x38>
	{
		occurence_character[init_index] = 0;
 80005c8:	f897 280f 	ldrb.w	r2, [r7, #2063]	; 0x80f
 80005cc:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80005d0:	2100      	movs	r1, #0
 80005d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (init_index = 0; init_index < ARRAY_SIZE; init_index++)
 80005d6:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 80005da:	3301      	adds	r3, #1
 80005dc:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
 80005e0:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	d1ef      	bne.n	80005c8 <initialize_huffman_tree+0x20>
	}

	// Compute occurence_character
	occurrence(i_text, occurence_character);
 80005e8:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4611      	mov	r1, r2
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	f000 f8b7 	bl	8000764 <occurrence>

	// Create leaf for all characters
	tree_size = creer_feuille(p_huffman_tree, occurence_character);
 80005f6:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4611      	mov	r1, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f8d0 	bl	80007a6 <creer_feuille>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 380e 	strb.w	r3, [r7, #2062]	; 0x80e

	// Sort and reduce tree
	sort_tree(p_huffman_tree, tree_size);
 800060c:	f897 280e 	ldrb.w	r2, [r7, #2062]	; 0x80e
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f91e 	bl	8000858 <sort_tree>
	reduce_tree(p_huffman_tree, tree_size);
 800061c:	f897 280e 	ldrb.w	r2, [r7, #2062]	; 0x80e
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f95f 	bl	80008ea <reduce_tree>

	// return tree root
	return p_huffman_tree[0];
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	681b      	ldr	r3, [r3, #0]
}
 8000632:	4618      	mov	r0, r3
 8000634:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <create_code>:
void create_code(struct node* p_node, uint32_t i_code, uint32_t i_size)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	// Check right and left pointers
	if((p_node->droite == NULL) && (p_node->gauche == NULL))
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10a      	bne.n	8000666 <create_code+0x2a>
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d106      	bne.n	8000666 <create_code+0x2a>
	{
		// Fill in node
		p_node->size_code = i_size;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	60da      	str	r2, [r3, #12]
		p_node->code      = i_code;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	e013      	b.n	800068e <create_code+0x52>
	else
	{
		// Continue to browse the tree
		//    Notice : When we go to right we put a 0 in the code
		//             When we go to left we put a 1 in the code
		create_code(p_node->droite, (i_code << 1),       i_size + 1);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6958      	ldr	r0, [r3, #20]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	0059      	lsls	r1, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	461a      	mov	r2, r3
 8000674:	f7ff ffe2 	bl	800063c <create_code>
		create_code(p_node->gauche, ((i_code << 1) + 1), i_size + 1);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	6918      	ldr	r0, [r3, #16]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	1c59      	adds	r1, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	461a      	mov	r2, r3
 8000688:	f7ff ffd8 	bl	800063c <create_code>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <compress_text>:

void compress_text(struct node* i_p_root, uint8_t  i_text[], uint8_t* o_compressed_text)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	// Variable declaration
	struct node* p_leaf;
	uint32_t     index_bit_text = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t     index_text     = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
	uint32_t     index_code     = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

	// Write every character of the text
	do
	{
		// Get the character structure
		p_leaf = get_adress(i_p_root, i_text[index_text]);
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f000 f932 	bl	8000924 <get_adress>
 80006c0:	61b8      	str	r0, [r7, #24]

		// Write character code
		for (index_code = 0; index_code < p_leaf->size_code; index_code++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	e034      	b.n	8000732 <compress_text+0x9a>
		{
			// Read bit value
			is_bit_set = MACRO_READ_BIT(p_leaf->code, index_code);
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	2101      	movs	r1, #1
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4013      	ands	r3, r2
 80006da:	75fb      	strb	r3, [r7, #23]

			//Check if bit is set
			if (is_bit_set)
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d01b      	beq.n	800071a <compress_text+0x82>
			{
				// Set bit in compressed text variable
				o_compressed_text[index_bit_text / 8] =  o_compressed_text[index_bit_text / 8] | (1 << ((index_bit_text % 8)));
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b259      	sxtb	r1, r3
 8000700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000702:	08db      	lsrs	r3, r3, #3
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	b2ca      	uxtb	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
				printf("\r \n");
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <compress_text+0xc0>)
 800070e:	f002 f96b 	bl	80029e8 <puts>
				printf("1 ");
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <compress_text+0xc4>)
 8000714:	f002 f8e2 	bl	80028dc <iprintf>
 8000718:	e005      	b.n	8000726 <compress_text+0x8e>
			}
			else
			{
				printf("\r \n");
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <compress_text+0xc0>)
 800071c:	f002 f964 	bl	80029e8 <puts>
				printf("0 ");
 8000720:	480f      	ldr	r0, [pc, #60]	; (8000760 <compress_text+0xc8>)
 8000722:	f002 f8db 	bl	80028dc <iprintf>
			}

			// Increment bit text index
			index_bit_text++;
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	3301      	adds	r3, #1
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
		for (index_code = 0; index_code < p_leaf->size_code; index_code++)
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	3301      	adds	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	69fa      	ldr	r2, [r7, #28]
 8000738:	429a      	cmp	r2, r3
 800073a:	d3c5      	bcc.n	80006c8 <compress_text+0x30>
		}

		// Increment text index
		index_text++;
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	3301      	adds	r3, #1
 8000740:	623b      	str	r3, [r7, #32]

	// Until we reach the end of the chain
	}while(END_CHAR != i_text[index_text]);
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1b0      	bne.n	80006b0 <compress_text+0x18>
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	08003738 	.word	0x08003738
 800075c:	0800373c 	.word	0x0800373c
 8000760:	08003740 	.word	0x08003740

08000764 <occurrence>:
 ****************************************************/
/**
 *  @brief Fill in occurrence array
 */
void occurrence(uint8_t* i_text, uint32_t* o_tab)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	// Variable declaration
	uint16_t index = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	81fb      	strh	r3, [r7, #14]

	do
	{
		// Increment occurrence array
		o_tab[i_text[index]]++;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	3201      	adds	r2, #1
 8000784:	601a      	str	r2, [r3, #0]

		// Increment index
		index++;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	81fb      	strh	r3, [r7, #14]

	// Until we reach the end of the chain
	}while(END_CHAR != i_text[index]);
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1ec      	bne.n	8000772 <occurrence+0xe>
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <creer_feuille>:

/**
 *  @brief Create leaf
 */
uint16_t creer_feuille(struct node* o_tree[NB_CHAR_MAX], uint32_t i_array[NB_CHAR_MAX])
{
 80007a6:	b590      	push	{r4, r7, lr}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
	// Variable declaration
	uint16_t index_occ   = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	81fb      	strh	r3, [r7, #14]
	uint16_t r_tree_size = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	81bb      	strh	r3, [r7, #12]

	// Check occurrence array
	for (index_occ = 0; index_occ < ARRAY_SIZE; index_occ++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	81fb      	strh	r3, [r7, #14]
 80007bc:	e044      	b.n	8000848 <creer_feuille+0xa2>
	{
		// If there is a char
		if (0 != i_array[index_occ])
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d03a      	beq.n	8000842 <creer_feuille+0x9c>
		{
			// Allocate memory to the new char
			o_tree[r_tree_size] = malloc(sizeof(struct node));
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	18d4      	adds	r4, r2, r3
 80007d4:	2018      	movs	r0, #24
 80007d6:	f001 ffc7 	bl	8002768 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	6023      	str	r3, [r4, #0]

			// Initialize feuille
			o_tree[r_tree_size]->character  = index_occ;
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	89fa      	ldrh	r2, [r7, #14]
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
			o_tree[r_tree_size]->occurrence = i_array[index_occ];
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	441a      	add	r2, r3
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	440b      	add	r3, r1
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	605a      	str	r2, [r3, #4]
			o_tree[r_tree_size]->droite     = NULL;
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
			o_tree[r_tree_size]->gauche     = NULL;
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
			o_tree[r_tree_size]->code       = 0;
 8000820:	89bb      	ldrh	r3, [r7, #12]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
			o_tree[r_tree_size]->size_code  = 0;
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]

			// Increment index
			r_tree_size++;
 800083c:	89bb      	ldrh	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	81bb      	strh	r3, [r7, #12]
	for (index_occ = 0; index_occ < ARRAY_SIZE; index_occ++)
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	3301      	adds	r3, #1
 8000846:	81fb      	strh	r3, [r7, #14]
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	2bfe      	cmp	r3, #254	; 0xfe
 800084c:	d9b7      	bls.n	80007be <creer_feuille+0x18>
		}
	}

	// Return tree size
	return r_tree_size;
 800084e:	89bb      	ldrh	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}

08000858 <sort_tree>:
	}
	printf("\r \n");
}

void sort_tree(struct node* io_tree[NB_CHAR_MAX], uint32_t i_size)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	uint16_t index_algo;
	uint16_t tree_index;
	struct node* p_temp_variable;

	// Repeat the sorted algorithm
	for (index_algo = 0; index_algo < i_size - 1; index_algo++)
 8000862:	2300      	movs	r3, #0
 8000864:	81fb      	strh	r3, [r7, #14]
 8000866:	e034      	b.n	80008d2 <sort_tree+0x7a>
	{
		//Check the entire tree
		for (tree_index = 0; tree_index < i_size - 1; tree_index++)
 8000868:	2300      	movs	r3, #0
 800086a:	81bb      	strh	r3, [r7, #12]
 800086c:	e029      	b.n	80008c2 <sort_tree+0x6a>
		{
			// Check if the next case of the array has more occurrence than the actual one
			if (io_tree[tree_index]->occurrence > io_tree[tree_index + 1]->occurrence)
 800086e:	89bb      	ldrh	r3, [r7, #12]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	440b      	add	r3, r1
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	d917      	bls.n	80008bc <sort_tree+0x64>
			{
				// Invert two case of the array
				p_temp_variable         = io_tree[tree_index];
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	60bb      	str	r3, [r7, #8]
				io_tree[tree_index]     = io_tree[tree_index + 1];
 8000898:	89bb      	ldrh	r3, [r7, #12]
 800089a:	3301      	adds	r3, #1
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	441a      	add	r2, r3
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	440b      	add	r3, r1
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	601a      	str	r2, [r3, #0]
				io_tree[tree_index + 1] = p_temp_variable;
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]
		for (tree_index = 0; tree_index < i_size - 1; tree_index++)
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	81bb      	strh	r3, [r7, #12]
 80008c2:	89ba      	ldrh	r2, [r7, #12]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3d0      	bcc.n	800086e <sort_tree+0x16>
	for (index_algo = 0; index_algo < i_size - 1; index_algo++)
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	3301      	adds	r3, #1
 80008d0:	81fb      	strh	r3, [r7, #14]
 80008d2:	89fa      	ldrh	r2, [r7, #14]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3c5      	bcc.n	8000868 <sort_tree+0x10>
			}
		}
	}
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <reduce_tree>:

void reduce_tree(struct node* io_tree[NB_CHAR_MAX], uint32_t i_size)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
	do
	{
		// Create a new node and stock its adress into tree_index case of io_tree array
		io_tree[0] = new_node(io_tree);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f846 	bl	8000986 <new_node>
 80008fa:	4602      	mov	r2, r0
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]

		//Shift tree array
		shift_tree(io_tree, &i_size);
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 f867 	bl	80009d8 <shift_tree>

		// Sort tree
		sort_tree(io_tree, i_size);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffa2 	bl	8000858 <sort_tree>

	// Until the tree size reach 0 (1 case)
	} while(i_size != 1);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d1ec      	bne.n	80008f4 <reduce_tree+0xa>
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <get_adress>:
		tree_browse(p_node->gauche);
	}
}

struct node* get_adress(struct node* p_node, uint8_t i_char)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	// Variable declaration
	struct node* r_p_node;

	// Check right and left pointers
	if((p_node->droite == NULL) && (p_node->gauche == NULL))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10e      	bne.n	8000956 <get_adress+0x32>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10a      	bne.n	8000956 <get_adress+0x32>
	{
		if (i_char == p_node->character)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	78fa      	ldrb	r2, [r7, #3]
 8000946:	429a      	cmp	r2, r3
 8000948:	d103      	bne.n	8000952 <get_adress+0x2e>
		{
			r_p_node = p_node;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]
			return r_p_node;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	e015      	b.n	800097e <get_adress+0x5a>
		}
		else
		{
			return NULL;
 8000952:	2300      	movs	r3, #0
 8000954:	e013      	b.n	800097e <get_adress+0x5a>
		}
	}
	else
	{
		// Continue to browse the tree
		r_p_node = get_adress(p_node->droite, i_char);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffe0 	bl	8000924 <get_adress>
 8000964:	60f8      	str	r0, [r7, #12]

		// Check returned value
		if(r_p_node == NULL)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d108      	bne.n	800097e <get_adress+0x5a>
		{
			return get_adress(p_node->gauche, i_char);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	78fa      	ldrb	r2, [r7, #3]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffd5 	bl	8000924 <get_adress>
 800097a:	4603      	mov	r3, r0
 800097c:	e7ff      	b.n	800097e <get_adress+0x5a>
		}
	}
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <new_node>:
/*****************************************************
 *            Private Functions Declaration          *
 ****************************************************/

static struct node* new_node(struct node* i_tree[NB_CHAR_MAX])
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b084      	sub	sp, #16
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	// Variable declaration
	struct node* r_p_temp_variable;

	// Allocate memory to the node
	r_p_temp_variable = malloc(sizeof(struct node));
 800098e:	2018      	movs	r0, #24
 8000990:	f001 feea 	bl	8002768 <malloc>
 8000994:	4603      	mov	r3, r0
 8000996:	60fb      	str	r3, [r7, #12]

	// Initialize node
	r_p_temp_variable->character  = '!';
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2221      	movs	r2, #33	; 0x21
 800099c:	701a      	strb	r2, [r3, #0]
	r_p_temp_variable->occurrence = i_tree[0]->occurrence + i_tree[1]->occurrence;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3304      	adds	r3, #4
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	441a      	add	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	605a      	str	r2, [r3, #4]
	r_p_temp_variable->droite     = i_tree[0];
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	615a      	str	r2, [r3, #20]
	r_p_temp_variable->gauche     = i_tree[1];
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	611a      	str	r2, [r3, #16]
	r_p_temp_variable->code       = 0;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	r_p_temp_variable->size_code  = 0;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
}
 80009ce:	bf00      	nop
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <shift_tree>:

static void shift_tree(struct node* io_tree[NB_CHAR_MAX], uint32_t* io_size)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	// Variable declaration
	uint16_t index_algo;

	// Reduce tree size
	*io_size = *io_size - 1;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1e5a      	subs	r2, r3, #1
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	601a      	str	r2, [r3, #0]

	// Shift all leaf form start index to the end
	for (index_algo = 1; index_algo < *io_size; index_algo++)
 80009ec:	2301      	movs	r3, #1
 80009ee:	81fb      	strh	r3, [r7, #14]
 80009f0:	e00d      	b.n	8000a0e <shift_tree+0x36>
	{
		io_tree[index_algo] = io_tree[index_algo + 1];
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	3301      	adds	r3, #1
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	441a      	add	r2, r3
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	440b      	add	r3, r1
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	601a      	str	r2, [r3, #0]
	for (index_algo = 1; index_algo < *io_size; index_algo++)
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	81fb      	strh	r3, [r7, #14]
 8000a0e:	89fa      	ldrh	r2, [r7, #14]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3ec      	bcc.n	80009f2 <shift_tree+0x1a>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0c6      	sub	sp, #280	; 0x118
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

    // Variable declaration
	uint8_t      text[]     = "aaaabbbccd";   // Text to compress Une banane   aaaabbbccd
 8000a2e:	4a27      	ldr	r2, [pc, #156]	; (8000acc <main+0xa4>)
 8000a30:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a36:	c303      	stmia	r3!, {r0, r1}
 8000a38:	801a      	strh	r2, [r3, #0]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	0c12      	lsrs	r2, r2, #16
 8000a3e:	701a      	strb	r2, [r3, #0]
	uint8_t      init_index = 0U;             // loop index used o initialize array
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint16_t     code       = 0U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	uint8_t      code_size  = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a52:	f000 fad9 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a56:	f000 f83f 	bl	8000ad8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Initialize text_compresss
  for (init_index =0; init_index < ARRAY_SIZE; init_index++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000a60:	e009      	b.n	8000a76 <main+0x4e>
  {
	  text_compress[init_index] = 0;
 8000a62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a66:	463a      	mov	r2, r7
 8000a68:	2100      	movs	r1, #0
 8000a6a:	54d1      	strb	r1, [r2, r3]
  for (init_index =0; init_index < ARRAY_SIZE; init_index++)
 8000a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a70:	3301      	adds	r3, #1
 8000a72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000a76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a7a:	2bff      	cmp	r3, #255	; 0xff
 8000a7c:	d1f1      	bne.n	8000a62 <main+0x3a>
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f8c3 	bl	8000c08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a82:	f000 f897 	bl	8000bb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	printf("\r \n");
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <main+0xa8>)
 8000a88:	f001 ffae 	bl	80029e8 <puts>
	printf("--- Program start ---");
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <main+0xac>)
 8000a8e:	f001 ff25 	bl	80028dc <iprintf>
	printf("\r \n");
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <main+0xa8>)
 8000a94:	f001 ffa8 	bl	80029e8 <puts>

	// Initiate Huffman tree
	p_root = initialize_huffman_tree(text);
 8000a98:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd83 	bl	80005a8 <initialize_huffman_tree>
 8000aa2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	// Create code
	create_code(p_root, code, code_size);
 8000aa6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000aaa:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000ab4:	f7ff fdc2 	bl	800063c <create_code>

	// Compress text
	compress_text(p_root, text, text_compress);
 8000ab8:	463a      	mov	r2, r7
 8000aba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000ac4:	f7ff fde8 	bl	8000698 <compress_text>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0xa0>
 8000aca:	bf00      	nop
 8000acc:	08003760 	.word	0x08003760
 8000ad0:	08003744 	.word	0x08003744
 8000ad4:	08003748 	.word	0x08003748

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2234      	movs	r2, #52	; 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fe46 	bl	8002778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <SystemClock_Config+0xd4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a29      	ldr	r2, [pc, #164]	; (8000bac <SystemClock_Config+0xd4>)
 8000b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b27      	ldr	r3, [pc, #156]	; (8000bac <SystemClock_Config+0xd4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <SystemClock_Config+0xd8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <SystemClock_Config+0xd8>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <SystemClock_Config+0xd8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b40:	2310      	movs	r3, #16
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f820 	bl	8001bac <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b72:	f000 f8c9 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fd3e 	bl	8001614 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b9e:	f000 f8b3 	bl	8000d08 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3750      	adds	r7, #80	; 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART2_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bec:	f001 fa7c 	bl	80020e8 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f887 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000098 	.word	0x20000098
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a2c      	ldr	r2, [pc, #176]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_GPIO_Init+0xd0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	4812      	ldr	r0, [pc, #72]	; (8000cdc <MX_GPIO_Init+0xd4>)
 8000c94:	f000 fca4 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0xd8>)
 8000cb0:	f000 fb02 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0xd4>)
 8000ccc:	f000 faf4 	bl	80012b8 <HAL_GPIO_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020800 	.word	0x40020800

08000ce4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8000cec:	1d39      	adds	r1, r7, #4
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <__io_putchar+0x20>)
 8000cf6:	f001 fa44 	bl	8002182 <HAL_UART_Transmit>
}
 8000cfa:	bf00      	nop
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000098 	.word	0x20000098

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f000 fa7c 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_UART_MspInit+0x8c>)
 8000dda:	f000 fa6d 	bl	80012b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f934 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e00a      	b.n	8000e70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5a:	f3af 8000 	nop.w
 8000e5e:	4601      	mov	r1, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <_read+0x12>
	}

return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e009      	b.n	8000ea8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff21 	bl	8000ce4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf1      	blt.n	8000e94 <_write+0x12>
	}
	return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_close>:

int _close(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f001 fbde 	bl	8002714 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20020000 	.word	0x20020000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	2000008c 	.word	0x2000008c
 8000f8c:	200000f0 	.word	0x200000f0

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f001 fb9d 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fd1f 	bl	8000a28 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff8:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001000:	200000f0 	.word	0x200000f0

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f90d 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fe6a 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f917 	bl	800129e <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f8ed 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	200000dc 	.word	0x200000dc

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200000dc 	.word	0x200000dc

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff47 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff5c 	bl	8001134 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffb0 	bl	800120c <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e165      	b.n	80015a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8154 	bne.w	800159a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80ae 	beq.w	800159a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a5c      	ldr	r2, [pc, #368]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_GPIO_Init+0x304>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_GPIO_Init+0x308>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	; (80015c4 <HAL_GPIO_Init+0x30c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <HAL_GPIO_Init+0x310>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4c      	ldr	r2, [pc, #304]	; (80015cc <HAL_GPIO_Init+0x314>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	; (80015d0 <HAL_GPIO_Init+0x318>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x20a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x31c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x206>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <HAL_GPIO_Init+0x320>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x202>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x304>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <HAL_GPIO_Init+0x324>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001516:	4a31      	ldr	r2, [pc, #196]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x324>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_GPIO_Init+0x324>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001594:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae96 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fce6 	bl	80010d4 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fce2 	bl	80010d4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f855 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fc46 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	0800376c 	.word	0x0800376c
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	0800377c 	.word	0x0800377c

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001824:	f7ff ffdc 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0b5b      	lsrs	r3, r3, #13
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	0800377c 	.word	0x0800377c

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800184c:	b088      	sub	sp, #32
 800184e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001864:	4bce      	ldr	r3, [pc, #824]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b0c      	cmp	r3, #12
 800186e:	f200 818d 	bhi.w	8001b8c <HAL_RCC_GetSysClockFreq+0x344>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_RCC_GetSysClockFreq+0x30>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	080018ad 	.word	0x080018ad
 800187c:	08001b8d 	.word	0x08001b8d
 8001880:	08001b8d 	.word	0x08001b8d
 8001884:	08001b8d 	.word	0x08001b8d
 8001888:	080018b3 	.word	0x080018b3
 800188c:	08001b8d 	.word	0x08001b8d
 8001890:	08001b8d 	.word	0x08001b8d
 8001894:	08001b8d 	.word	0x08001b8d
 8001898:	080018b9 	.word	0x080018b9
 800189c:	08001b8d 	.word	0x08001b8d
 80018a0:	08001b8d 	.word	0x08001b8d
 80018a4:	08001b8d 	.word	0x08001b8d
 80018a8:	08001a2d 	.word	0x08001a2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4bbd      	ldr	r3, [pc, #756]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018ae:	61bb      	str	r3, [r7, #24]
       break;
 80018b0:	e16f      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b2:	4bbd      	ldr	r3, [pc, #756]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x360>)
 80018b4:	61bb      	str	r3, [r7, #24]
      break;
 80018b6:	e16c      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4bb9      	ldr	r3, [pc, #740]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c2:	4bb7      	ldr	r3, [pc, #732]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d053      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4bb4      	ldr	r3, [pc, #720]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	461a      	mov	r2, r3
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	ea02 0400 	and.w	r4, r2, r0
 80018e6:	603c      	str	r4, [r7, #0]
 80018e8:	400b      	ands	r3, r1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	014b      	lsls	r3, r1, #5
 80018fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001902:	0142      	lsls	r2, r0, #5
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	4623      	mov	r3, r4
 800190a:	1ac0      	subs	r0, r0, r3
 800190c:	462b      	mov	r3, r5
 800190e:	eb61 0103 	sbc.w	r1, r1, r3
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	018b      	lsls	r3, r1, #6
 800191c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001920:	0182      	lsls	r2, r0, #6
 8001922:	1a12      	subs	r2, r2, r0
 8001924:	eb63 0301 	sbc.w	r3, r3, r1
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	00d9      	lsls	r1, r3, #3
 8001932:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001936:	00d0      	lsls	r0, r2, #3
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4621      	mov	r1, r4
 800193e:	1852      	adds	r2, r2, r1
 8001940:	4629      	mov	r1, r5
 8001942:	eb43 0101 	adc.w	r1, r3, r1
 8001946:	460b      	mov	r3, r1
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0259      	lsls	r1, r3, #9
 8001952:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001956:	0250      	lsls	r0, r2, #9
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	461a      	mov	r2, r3
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	f7fe fca2 	bl	80002b0 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	e04c      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b8a      	ldr	r3, [pc, #552]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	461a      	mov	r2, r3
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	ea02 0a00 	and.w	sl, r2, r0
 800198e:	ea03 0b01 	and.w	fp, r3, r1
 8001992:	4650      	mov	r0, sl
 8001994:	4659      	mov	r1, fp
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	014b      	lsls	r3, r1, #5
 80019a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a4:	0142      	lsls	r2, r0, #5
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	ebb0 000a 	subs.w	r0, r0, sl
 80019ae:	eb61 010b 	sbc.w	r1, r1, fp
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c0:	0182      	lsls	r2, r0, #6
 80019c2:	1a12      	subs	r2, r2, r0
 80019c4:	eb63 0301 	sbc.w	r3, r3, r1
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	00d9      	lsls	r1, r3, #3
 80019d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d6:	00d0      	lsls	r0, r2, #3
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	eb12 020a 	adds.w	r2, r2, sl
 80019e0:	eb43 030b 	adc.w	r3, r3, fp
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	0299      	lsls	r1, r3, #10
 80019ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019f2:	0290      	lsls	r0, r2, #10
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f7fe fc54 	bl	80002b0 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	61bb      	str	r3, [r7, #24]
      break;
 8001a2a:	e0b2      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a34:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04d      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	ea02 0800 	and.w	r8, r2, r0
 8001a5a:	ea03 0901 	and.w	r9, r3, r1
 8001a5e:	4640      	mov	r0, r8
 8001a60:	4649      	mov	r1, r9
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	014b      	lsls	r3, r1, #5
 8001a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a70:	0142      	lsls	r2, r0, #5
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	ebb0 0008 	subs.w	r0, r0, r8
 8001a7a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	018b      	lsls	r3, r1, #6
 8001a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a8c:	0182      	lsls	r2, r0, #6
 8001a8e:	1a12      	subs	r2, r2, r0
 8001a90:	eb63 0301 	sbc.w	r3, r3, r1
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	00d9      	lsls	r1, r3, #3
 8001a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa2:	00d0      	lsls	r0, r2, #3
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	eb12 0208 	adds.w	r2, r2, r8
 8001aac:	eb43 0309 	adc.w	r3, r3, r9
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	0259      	lsls	r1, r3, #9
 8001aba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001abe:	0250      	lsls	r0, r2, #9
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	f7fe fbee 	bl	80002b0 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	e04a      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	ea02 0400 	and.w	r4, r2, r0
 8001af6:	ea03 0501 	and.w	r5, r3, r1
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	014b      	lsls	r3, r1, #5
 8001b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b0c:	0142      	lsls	r2, r0, #5
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	1b00      	subs	r0, r0, r4
 8001b14:	eb61 0105 	sbc.w	r1, r1, r5
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	018b      	lsls	r3, r1, #6
 8001b22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b26:	0182      	lsls	r2, r0, #6
 8001b28:	1a12      	subs	r2, r2, r0
 8001b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	00d9      	lsls	r1, r3, #3
 8001b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b3c:	00d0      	lsls	r0, r2, #3
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	1912      	adds	r2, r2, r4
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	0299      	lsls	r1, r3, #10
 8001b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b56:	0290      	lsls	r0, r2, #10
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f7fe fba2 	bl	80002b0 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0f1b      	lsrs	r3, r3, #28
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	61bb      	str	r3, [r7, #24]
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b8e:	61bb      	str	r3, [r7, #24]
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	69bb      	ldr	r3, [r7, #24]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e28d      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8083 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bcc:	4b94      	ldr	r3, [pc, #592]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d019      	beq.n	8001c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bd8:	4b91      	ldr	r3, [pc, #580]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001be4:	4b8e      	ldr	r3, [pc, #568]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf0:	d00c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf2:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d112      	bne.n	8001c24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0a:	d10b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d05b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x124>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d157      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e25a      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x90>
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xcc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xb4>
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a72      	ldr	r2, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xcc>
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6b      	ldr	r2, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa28 	bl	80010d4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fa24 	bl	80010d4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e21f      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xdc>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fa14 	bl	80010d4 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fa10 	bl	80010d4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e20b      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x104>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06f      	beq.n	8001dbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cde:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d017      	beq.n	8001d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d105      	bne.n	8001d02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x186>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1d3      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4937      	ldr	r1, [pc, #220]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_OscConfig+0x278>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f9bd 	bl	80010d4 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f9b9 	bl	80010d4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1b4      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4925      	ldr	r1, [pc, #148]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x278>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f99c 	bl	80010d4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff f998 	bl	80010d4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e193      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d036      	beq.n	8001e38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f97c 	bl	80010d4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f978 	bl	80010d4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e173      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x234>
 8001dfe:	e01b      	b.n	8001e38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff f965 	bl	80010d4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00e      	b.n	8001e2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f961 	bl	80010d4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d907      	bls.n	8001e2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e15c      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	42470000 	.word	0x42470000
 8001e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ea      	bne.n	8001e0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8097 	beq.w	8001f74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b79      	ldr	r3, [pc, #484]	; (800205c <HAL_RCC_OscConfig+0x4b0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x4b0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x4b0>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f921 	bl	80010d4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff f91d 	bl	80010d4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e118      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x4b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x31e>
 8001ebc:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x358>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x340>
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ede:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x358>
 8001eec:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a59      	ldr	r2, [pc, #356]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f8e2 	bl	80010d4 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff f8de 	bl	80010d4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0d7      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ee      	beq.n	8001f14 <HAL_RCC_OscConfig+0x368>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f8cc 	bl	80010d4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7ff f8c8 	bl	80010d4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0c1      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ee      	bne.n	8001f40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80ad 	beq.w	80020d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d060      	beq.n	800204c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d145      	bne.n	800201e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x4b4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f89c 	bl	80010d4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff f898 	bl	80010d4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e093      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	071b      	lsls	r3, r3, #28
 8001fea:	491b      	ldr	r1, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4b4>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f86d 	bl	80010d4 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7ff f869 	bl	80010d4 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e064      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x452>
 800201c:	e05c      	b.n	80020d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x4b4>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f856 	bl	80010d4 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff f852 	bl	80010d4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e04d      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x480>
 800204a:	e045      	b.n	80020d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e040      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000
 8002060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_RCC_OscConfig+0x538>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d030      	beq.n	80020d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d129      	bne.n	80020d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d122      	bne.n	80020d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002094:	4013      	ands	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800209a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800209c:	4293      	cmp	r3, r2
 800209e:	d119      	bne.n	80020d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10f      	bne.n	80020d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e03f      	b.n	800217a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fe28 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f929 	bl	8002384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
 8002186:	af02      	add	r7, sp, #8
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d17c      	bne.n	800229c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_UART_Transmit+0x2c>
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e075      	b.n	800229e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_UART_Transmit+0x3e>
 80021bc:	2302      	movs	r3, #2
 80021be:	e06e      	b.n	800229e <HAL_UART_Transmit+0x11c>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2221      	movs	r2, #33	; 0x21
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021d6:	f7fe ff7d 	bl	80010d4 <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f0:	d108      	bne.n	8002204 <HAL_UART_Transmit+0x82>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e003      	b.n	800220c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002214:	e02a      	b.n	800226c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2200      	movs	r2, #0
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f840 	bl	80022a6 <UART_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e036      	b.n	800229e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	3302      	adds	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	e007      	b.n	800225e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1cf      	bne.n	8002216 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f810 	bl	80022a6 <UART_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e006      	b.n	800229e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e000      	b.n	800229e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
  }
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b090      	sub	sp, #64	; 0x40
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b6:	e050      	b.n	800235a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022be:	d04c      	beq.n	800235a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022c6:	f7fe ff05 	bl	80010d4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d241      	bcs.n	800235a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	e853 3f00 	ldrex	r3, [r3]
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	330c      	adds	r3, #12
 80022f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f6:	637a      	str	r2, [r7, #52]	; 0x34
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022fe:	e841 2300 	strex	r3, r2, [r1]
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e5      	bne.n	80022d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	613b      	str	r3, [r7, #16]
   return(result);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3314      	adds	r3, #20
 8002328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800232a:	623a      	str	r2, [r7, #32]
 800232c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	69f9      	ldr	r1, [r7, #28]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	61bb      	str	r3, [r7, #24]
   return(result);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e5      	bne.n	800230a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e00f      	b.n	800237a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	429a      	cmp	r2, r3
 8002376:	d09f      	beq.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3740      	adds	r7, #64	; 0x40
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002388:	b09f      	sub	sp, #124	; 0x7c
 800238a:	af00      	add	r7, sp, #0
 800238c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239a:	68d9      	ldr	r1, [r3, #12]
 800239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	ea40 0301 	orr.w	r3, r0, r1
 80023a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80023be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023c8:	f021 010c 	bic.w	r1, r1, #12
 80023cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d2:	430b      	orrs	r3, r1
 80023d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e2:	6999      	ldr	r1, [r3, #24]
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	ea40 0301 	orr.w	r3, r0, r1
 80023ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4bc5      	ldr	r3, [pc, #788]	; (8002708 <UART_SetConfig+0x384>)
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d004      	beq.n	8002402 <UART_SetConfig+0x7e>
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4bc3      	ldr	r3, [pc, #780]	; (800270c <UART_SetConfig+0x388>)
 80023fe:	429a      	cmp	r2, r3
 8002400:	d103      	bne.n	800240a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002402:	f7ff fa0d 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002406:	6778      	str	r0, [r7, #116]	; 0x74
 8002408:	e002      	b.n	8002410 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800240a:	f7ff f9f5 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 800240e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002418:	f040 80b6 	bne.w	8002588 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800241c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241e:	461c      	mov	r4, r3
 8002420:	f04f 0500 	mov.w	r5, #0
 8002424:	4622      	mov	r2, r4
 8002426:	462b      	mov	r3, r5
 8002428:	1891      	adds	r1, r2, r2
 800242a:	6439      	str	r1, [r7, #64]	; 0x40
 800242c:	415b      	adcs	r3, r3
 800242e:	647b      	str	r3, [r7, #68]	; 0x44
 8002430:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002434:	1912      	adds	r2, r2, r4
 8002436:	eb45 0303 	adc.w	r3, r5, r3
 800243a:	f04f 0000 	mov.w	r0, #0
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	00d9      	lsls	r1, r3, #3
 8002444:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002448:	00d0      	lsls	r0, r2, #3
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	1911      	adds	r1, r2, r4
 8002450:	6639      	str	r1, [r7, #96]	; 0x60
 8002452:	416b      	adcs	r3, r5
 8002454:	667b      	str	r3, [r7, #100]	; 0x64
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	461a      	mov	r2, r3
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	1891      	adds	r1, r2, r2
 8002462:	63b9      	str	r1, [r7, #56]	; 0x38
 8002464:	415b      	adcs	r3, r3
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800246c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002470:	f7fd ff1e 	bl	80002b0 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4ba5      	ldr	r3, [pc, #660]	; (8002710 <UART_SetConfig+0x38c>)
 800247a:	fba3 2302 	umull	r2, r3, r3, r2
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	011e      	lsls	r6, r3, #4
 8002482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002484:	461c      	mov	r4, r3
 8002486:	f04f 0500 	mov.w	r5, #0
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	1891      	adds	r1, r2, r2
 8002490:	6339      	str	r1, [r7, #48]	; 0x30
 8002492:	415b      	adcs	r3, r3
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
 8002496:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800249a:	1912      	adds	r2, r2, r4
 800249c:	eb45 0303 	adc.w	r3, r5, r3
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	00d9      	lsls	r1, r3, #3
 80024aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ae:	00d0      	lsls	r0, r2, #3
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	1911      	adds	r1, r2, r4
 80024b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80024b8:	416b      	adcs	r3, r5
 80024ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	1891      	adds	r1, r2, r2
 80024c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80024ca:	415b      	adcs	r3, r3
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024d6:	f7fd feeb 	bl	80002b0 <__aeabi_uldivmod>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4b8c      	ldr	r3, [pc, #560]	; (8002710 <UART_SetConfig+0x38c>)
 80024e0:	fba3 1302 	umull	r1, r3, r3, r2
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	2164      	movs	r1, #100	; 0x64
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3332      	adds	r3, #50	; 0x32
 80024f2:	4a87      	ldr	r2, [pc, #540]	; (8002710 <UART_SetConfig+0x38c>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002500:	441e      	add	r6, r3
 8002502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002504:	4618      	mov	r0, r3
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	1894      	adds	r4, r2, r2
 8002510:	623c      	str	r4, [r7, #32]
 8002512:	415b      	adcs	r3, r3
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800251a:	1812      	adds	r2, r2, r0
 800251c:	eb41 0303 	adc.w	r3, r1, r3
 8002520:	f04f 0400 	mov.w	r4, #0
 8002524:	f04f 0500 	mov.w	r5, #0
 8002528:	00dd      	lsls	r5, r3, #3
 800252a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800252e:	00d4      	lsls	r4, r2, #3
 8002530:	4622      	mov	r2, r4
 8002532:	462b      	mov	r3, r5
 8002534:	1814      	adds	r4, r2, r0
 8002536:	653c      	str	r4, [r7, #80]	; 0x50
 8002538:	414b      	adcs	r3, r1
 800253a:	657b      	str	r3, [r7, #84]	; 0x54
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	461a      	mov	r2, r3
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	1891      	adds	r1, r2, r2
 8002548:	61b9      	str	r1, [r7, #24]
 800254a:	415b      	adcs	r3, r3
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002552:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002556:	f7fd feab 	bl	80002b0 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <UART_SetConfig+0x38c>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	3332      	adds	r3, #50	; 0x32
 8002572:	4a67      	ldr	r2, [pc, #412]	; (8002710 <UART_SetConfig+0x38c>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 0207 	and.w	r2, r3, #7
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4432      	add	r2, r6
 8002584:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002586:	e0b9      	b.n	80026fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258a:	461c      	mov	r4, r3
 800258c:	f04f 0500 	mov.w	r5, #0
 8002590:	4622      	mov	r2, r4
 8002592:	462b      	mov	r3, r5
 8002594:	1891      	adds	r1, r2, r2
 8002596:	6139      	str	r1, [r7, #16]
 8002598:	415b      	adcs	r3, r3
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025a0:	1912      	adds	r2, r2, r4
 80025a2:	eb45 0303 	adc.w	r3, r5, r3
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	00d9      	lsls	r1, r3, #3
 80025b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025b4:	00d0      	lsls	r0, r2, #3
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	eb12 0804 	adds.w	r8, r2, r4
 80025be:	eb43 0905 	adc.w	r9, r3, r5
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	008b      	lsls	r3, r1, #2
 80025d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025da:	0082      	lsls	r2, r0, #2
 80025dc:	4640      	mov	r0, r8
 80025de:	4649      	mov	r1, r9
 80025e0:	f7fd fe66 	bl	80002b0 <__aeabi_uldivmod>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4b49      	ldr	r3, [pc, #292]	; (8002710 <UART_SetConfig+0x38c>)
 80025ea:	fba3 2302 	umull	r2, r3, r3, r2
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	011e      	lsls	r6, r3, #4
 80025f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f4:	4618      	mov	r0, r3
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	1894      	adds	r4, r2, r2
 8002600:	60bc      	str	r4, [r7, #8]
 8002602:	415b      	adcs	r3, r3
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800260a:	1812      	adds	r2, r2, r0
 800260c:	eb41 0303 	adc.w	r3, r1, r3
 8002610:	f04f 0400 	mov.w	r4, #0
 8002614:	f04f 0500 	mov.w	r5, #0
 8002618:	00dd      	lsls	r5, r3, #3
 800261a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800261e:	00d4      	lsls	r4, r2, #3
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	1814      	adds	r4, r2, r0
 8002626:	64bc      	str	r4, [r7, #72]	; 0x48
 8002628:	414b      	adcs	r3, r1
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800262c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4618      	mov	r0, r3
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	008b      	lsls	r3, r1, #2
 8002640:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002644:	0082      	lsls	r2, r0, #2
 8002646:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800264a:	f7fd fe31 	bl	80002b0 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <UART_SetConfig+0x38c>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2164      	movs	r1, #100	; 0x64
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a2a      	ldr	r2, [pc, #168]	; (8002710 <UART_SetConfig+0x38c>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002672:	441e      	add	r6, r3
 8002674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002676:	4618      	mov	r0, r3
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	1894      	adds	r4, r2, r2
 8002682:	603c      	str	r4, [r7, #0]
 8002684:	415b      	adcs	r3, r3
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800268c:	1812      	adds	r2, r2, r0
 800268e:	eb41 0303 	adc.w	r3, r1, r3
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	f04f 0500 	mov.w	r5, #0
 800269a:	00dd      	lsls	r5, r3, #3
 800269c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026a0:	00d4      	lsls	r4, r2, #3
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	eb12 0a00 	adds.w	sl, r2, r0
 80026aa:	eb43 0b01 	adc.w	fp, r3, r1
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	008b      	lsls	r3, r1, #2
 80026c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026c6:	0082      	lsls	r2, r0, #2
 80026c8:	4650      	mov	r0, sl
 80026ca:	4659      	mov	r1, fp
 80026cc:	f7fd fdf0 	bl	80002b0 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <UART_SetConfig+0x38c>)
 80026d6:	fba3 1302 	umull	r1, r3, r3, r2
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2164      	movs	r1, #100	; 0x64
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	3332      	adds	r3, #50	; 0x32
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <UART_SetConfig+0x38c>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4432      	add	r2, r6
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	377c      	adds	r7, #124	; 0x7c
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002706:	bf00      	nop
 8002708:	40011000 	.word	0x40011000
 800270c:	40011400 	.word	0x40011400
 8002710:	51eb851f 	.word	0x51eb851f

08002714 <__errno>:
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <__errno+0x8>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4d0d      	ldr	r5, [pc, #52]	; (8002758 <__libc_init_array+0x38>)
 8002724:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002726:	1b64      	subs	r4, r4, r5
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2600      	movs	r6, #0
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	4d0b      	ldr	r5, [pc, #44]	; (8002760 <__libc_init_array+0x40>)
 8002732:	4c0c      	ldr	r4, [pc, #48]	; (8002764 <__libc_init_array+0x44>)
 8002734:	f000 fff4 	bl	8003720 <_init>
 8002738:	1b64      	subs	r4, r4, r5
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	2600      	movs	r6, #0
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f855 3b04 	ldr.w	r3, [r5], #4
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	08003824 	.word	0x08003824
 800275c:	08003824 	.word	0x08003824
 8002760:	08003824 	.word	0x08003824
 8002764:	08003828 	.word	0x08003828

08002768 <malloc>:
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <malloc+0xc>)
 800276a:	4601      	mov	r1, r0
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	f000 b85b 	b.w	8002828 <_malloc_r>
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c

08002778 <memset>:
 8002778:	4402      	add	r2, r0
 800277a:	4603      	mov	r3, r0
 800277c:	4293      	cmp	r3, r2
 800277e:	d100      	bne.n	8002782 <memset+0xa>
 8002780:	4770      	bx	lr
 8002782:	f803 1b01 	strb.w	r1, [r3], #1
 8002786:	e7f9      	b.n	800277c <memset+0x4>

08002788 <_free_r>:
 8002788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800278a:	2900      	cmp	r1, #0
 800278c:	d048      	beq.n	8002820 <_free_r+0x98>
 800278e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002792:	9001      	str	r0, [sp, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f1a1 0404 	sub.w	r4, r1, #4
 800279a:	bfb8      	it	lt
 800279c:	18e4      	addlt	r4, r4, r3
 800279e:	f000 fc19 	bl	8002fd4 <__malloc_lock>
 80027a2:	4a20      	ldr	r2, [pc, #128]	; (8002824 <_free_r+0x9c>)
 80027a4:	9801      	ldr	r0, [sp, #4]
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	4615      	mov	r5, r2
 80027aa:	b933      	cbnz	r3, 80027ba <_free_r+0x32>
 80027ac:	6063      	str	r3, [r4, #4]
 80027ae:	6014      	str	r4, [r2, #0]
 80027b0:	b003      	add	sp, #12
 80027b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027b6:	f000 bc13 	b.w	8002fe0 <__malloc_unlock>
 80027ba:	42a3      	cmp	r3, r4
 80027bc:	d90b      	bls.n	80027d6 <_free_r+0x4e>
 80027be:	6821      	ldr	r1, [r4, #0]
 80027c0:	1862      	adds	r2, r4, r1
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bf04      	itt	eq
 80027c6:	681a      	ldreq	r2, [r3, #0]
 80027c8:	685b      	ldreq	r3, [r3, #4]
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	bf04      	itt	eq
 80027ce:	1852      	addeq	r2, r2, r1
 80027d0:	6022      	streq	r2, [r4, #0]
 80027d2:	602c      	str	r4, [r5, #0]
 80027d4:	e7ec      	b.n	80027b0 <_free_r+0x28>
 80027d6:	461a      	mov	r2, r3
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b10b      	cbz	r3, 80027e0 <_free_r+0x58>
 80027dc:	42a3      	cmp	r3, r4
 80027de:	d9fa      	bls.n	80027d6 <_free_r+0x4e>
 80027e0:	6811      	ldr	r1, [r2, #0]
 80027e2:	1855      	adds	r5, r2, r1
 80027e4:	42a5      	cmp	r5, r4
 80027e6:	d10b      	bne.n	8002800 <_free_r+0x78>
 80027e8:	6824      	ldr	r4, [r4, #0]
 80027ea:	4421      	add	r1, r4
 80027ec:	1854      	adds	r4, r2, r1
 80027ee:	42a3      	cmp	r3, r4
 80027f0:	6011      	str	r1, [r2, #0]
 80027f2:	d1dd      	bne.n	80027b0 <_free_r+0x28>
 80027f4:	681c      	ldr	r4, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	6053      	str	r3, [r2, #4]
 80027fa:	4421      	add	r1, r4
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	e7d7      	b.n	80027b0 <_free_r+0x28>
 8002800:	d902      	bls.n	8002808 <_free_r+0x80>
 8002802:	230c      	movs	r3, #12
 8002804:	6003      	str	r3, [r0, #0]
 8002806:	e7d3      	b.n	80027b0 <_free_r+0x28>
 8002808:	6825      	ldr	r5, [r4, #0]
 800280a:	1961      	adds	r1, r4, r5
 800280c:	428b      	cmp	r3, r1
 800280e:	bf04      	itt	eq
 8002810:	6819      	ldreq	r1, [r3, #0]
 8002812:	685b      	ldreq	r3, [r3, #4]
 8002814:	6063      	str	r3, [r4, #4]
 8002816:	bf04      	itt	eq
 8002818:	1949      	addeq	r1, r1, r5
 800281a:	6021      	streq	r1, [r4, #0]
 800281c:	6054      	str	r4, [r2, #4]
 800281e:	e7c7      	b.n	80027b0 <_free_r+0x28>
 8002820:	b003      	add	sp, #12
 8002822:	bd30      	pop	{r4, r5, pc}
 8002824:	20000090 	.word	0x20000090

08002828 <_malloc_r>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	1ccd      	adds	r5, r1, #3
 800282c:	f025 0503 	bic.w	r5, r5, #3
 8002830:	3508      	adds	r5, #8
 8002832:	2d0c      	cmp	r5, #12
 8002834:	bf38      	it	cc
 8002836:	250c      	movcc	r5, #12
 8002838:	2d00      	cmp	r5, #0
 800283a:	4606      	mov	r6, r0
 800283c:	db01      	blt.n	8002842 <_malloc_r+0x1a>
 800283e:	42a9      	cmp	r1, r5
 8002840:	d903      	bls.n	800284a <_malloc_r+0x22>
 8002842:	230c      	movs	r3, #12
 8002844:	6033      	str	r3, [r6, #0]
 8002846:	2000      	movs	r0, #0
 8002848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800284a:	f000 fbc3 	bl	8002fd4 <__malloc_lock>
 800284e:	4921      	ldr	r1, [pc, #132]	; (80028d4 <_malloc_r+0xac>)
 8002850:	680a      	ldr	r2, [r1, #0]
 8002852:	4614      	mov	r4, r2
 8002854:	b99c      	cbnz	r4, 800287e <_malloc_r+0x56>
 8002856:	4f20      	ldr	r7, [pc, #128]	; (80028d8 <_malloc_r+0xb0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b923      	cbnz	r3, 8002866 <_malloc_r+0x3e>
 800285c:	4621      	mov	r1, r4
 800285e:	4630      	mov	r0, r6
 8002860:	f000 f8ca 	bl	80029f8 <_sbrk_r>
 8002864:	6038      	str	r0, [r7, #0]
 8002866:	4629      	mov	r1, r5
 8002868:	4630      	mov	r0, r6
 800286a:	f000 f8c5 	bl	80029f8 <_sbrk_r>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	d123      	bne.n	80028ba <_malloc_r+0x92>
 8002872:	230c      	movs	r3, #12
 8002874:	6033      	str	r3, [r6, #0]
 8002876:	4630      	mov	r0, r6
 8002878:	f000 fbb2 	bl	8002fe0 <__malloc_unlock>
 800287c:	e7e3      	b.n	8002846 <_malloc_r+0x1e>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	1b5b      	subs	r3, r3, r5
 8002882:	d417      	bmi.n	80028b4 <_malloc_r+0x8c>
 8002884:	2b0b      	cmp	r3, #11
 8002886:	d903      	bls.n	8002890 <_malloc_r+0x68>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	441c      	add	r4, r3
 800288c:	6025      	str	r5, [r4, #0]
 800288e:	e004      	b.n	800289a <_malloc_r+0x72>
 8002890:	6863      	ldr	r3, [r4, #4]
 8002892:	42a2      	cmp	r2, r4
 8002894:	bf0c      	ite	eq
 8002896:	600b      	streq	r3, [r1, #0]
 8002898:	6053      	strne	r3, [r2, #4]
 800289a:	4630      	mov	r0, r6
 800289c:	f000 fba0 	bl	8002fe0 <__malloc_unlock>
 80028a0:	f104 000b 	add.w	r0, r4, #11
 80028a4:	1d23      	adds	r3, r4, #4
 80028a6:	f020 0007 	bic.w	r0, r0, #7
 80028aa:	1ac2      	subs	r2, r0, r3
 80028ac:	d0cc      	beq.n	8002848 <_malloc_r+0x20>
 80028ae:	1a1b      	subs	r3, r3, r0
 80028b0:	50a3      	str	r3, [r4, r2]
 80028b2:	e7c9      	b.n	8002848 <_malloc_r+0x20>
 80028b4:	4622      	mov	r2, r4
 80028b6:	6864      	ldr	r4, [r4, #4]
 80028b8:	e7cc      	b.n	8002854 <_malloc_r+0x2c>
 80028ba:	1cc4      	adds	r4, r0, #3
 80028bc:	f024 0403 	bic.w	r4, r4, #3
 80028c0:	42a0      	cmp	r0, r4
 80028c2:	d0e3      	beq.n	800288c <_malloc_r+0x64>
 80028c4:	1a21      	subs	r1, r4, r0
 80028c6:	4630      	mov	r0, r6
 80028c8:	f000 f896 	bl	80029f8 <_sbrk_r>
 80028cc:	3001      	adds	r0, #1
 80028ce:	d1dd      	bne.n	800288c <_malloc_r+0x64>
 80028d0:	e7cf      	b.n	8002872 <_malloc_r+0x4a>
 80028d2:	bf00      	nop
 80028d4:	20000090 	.word	0x20000090
 80028d8:	20000094 	.word	0x20000094

080028dc <iprintf>:
 80028dc:	b40f      	push	{r0, r1, r2, r3}
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <iprintf+0x2c>)
 80028e0:	b513      	push	{r0, r1, r4, lr}
 80028e2:	681c      	ldr	r4, [r3, #0]
 80028e4:	b124      	cbz	r4, 80028f0 <iprintf+0x14>
 80028e6:	69a3      	ldr	r3, [r4, #24]
 80028e8:	b913      	cbnz	r3, 80028f0 <iprintf+0x14>
 80028ea:	4620      	mov	r0, r4
 80028ec:	f000 fa6e 	bl	8002dcc <__sinit>
 80028f0:	ab05      	add	r3, sp, #20
 80028f2:	9a04      	ldr	r2, [sp, #16]
 80028f4:	68a1      	ldr	r1, [r4, #8]
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 fba1 	bl	8003040 <_vfiprintf_r>
 80028fe:	b002      	add	sp, #8
 8002900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002904:	b004      	add	sp, #16
 8002906:	4770      	bx	lr
 8002908:	2000000c 	.word	0x2000000c

0800290c <_puts_r>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	460e      	mov	r6, r1
 8002910:	4605      	mov	r5, r0
 8002912:	b118      	cbz	r0, 800291c <_puts_r+0x10>
 8002914:	6983      	ldr	r3, [r0, #24]
 8002916:	b90b      	cbnz	r3, 800291c <_puts_r+0x10>
 8002918:	f000 fa58 	bl	8002dcc <__sinit>
 800291c:	69ab      	ldr	r3, [r5, #24]
 800291e:	68ac      	ldr	r4, [r5, #8]
 8002920:	b913      	cbnz	r3, 8002928 <_puts_r+0x1c>
 8002922:	4628      	mov	r0, r5
 8002924:	f000 fa52 	bl	8002dcc <__sinit>
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <_puts_r+0xd0>)
 800292a:	429c      	cmp	r4, r3
 800292c:	d120      	bne.n	8002970 <_puts_r+0x64>
 800292e:	686c      	ldr	r4, [r5, #4]
 8002930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002932:	07db      	lsls	r3, r3, #31
 8002934:	d405      	bmi.n	8002942 <_puts_r+0x36>
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	0598      	lsls	r0, r3, #22
 800293a:	d402      	bmi.n	8002942 <_puts_r+0x36>
 800293c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800293e:	f000 fae3 	bl	8002f08 <__retarget_lock_acquire_recursive>
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	0719      	lsls	r1, r3, #28
 8002946:	d51d      	bpl.n	8002984 <_puts_r+0x78>
 8002948:	6923      	ldr	r3, [r4, #16]
 800294a:	b1db      	cbz	r3, 8002984 <_puts_r+0x78>
 800294c:	3e01      	subs	r6, #1
 800294e:	68a3      	ldr	r3, [r4, #8]
 8002950:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002954:	3b01      	subs	r3, #1
 8002956:	60a3      	str	r3, [r4, #8]
 8002958:	bb39      	cbnz	r1, 80029aa <_puts_r+0x9e>
 800295a:	2b00      	cmp	r3, #0
 800295c:	da38      	bge.n	80029d0 <_puts_r+0xc4>
 800295e:	4622      	mov	r2, r4
 8002960:	210a      	movs	r1, #10
 8002962:	4628      	mov	r0, r5
 8002964:	f000 f858 	bl	8002a18 <__swbuf_r>
 8002968:	3001      	adds	r0, #1
 800296a:	d011      	beq.n	8002990 <_puts_r+0x84>
 800296c:	250a      	movs	r5, #10
 800296e:	e011      	b.n	8002994 <_puts_r+0x88>
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <_puts_r+0xd4>)
 8002972:	429c      	cmp	r4, r3
 8002974:	d101      	bne.n	800297a <_puts_r+0x6e>
 8002976:	68ac      	ldr	r4, [r5, #8]
 8002978:	e7da      	b.n	8002930 <_puts_r+0x24>
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <_puts_r+0xd8>)
 800297c:	429c      	cmp	r4, r3
 800297e:	bf08      	it	eq
 8002980:	68ec      	ldreq	r4, [r5, #12]
 8002982:	e7d5      	b.n	8002930 <_puts_r+0x24>
 8002984:	4621      	mov	r1, r4
 8002986:	4628      	mov	r0, r5
 8002988:	f000 f898 	bl	8002abc <__swsetup_r>
 800298c:	2800      	cmp	r0, #0
 800298e:	d0dd      	beq.n	800294c <_puts_r+0x40>
 8002990:	f04f 35ff 	mov.w	r5, #4294967295
 8002994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002996:	07da      	lsls	r2, r3, #31
 8002998:	d405      	bmi.n	80029a6 <_puts_r+0x9a>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	059b      	lsls	r3, r3, #22
 800299e:	d402      	bmi.n	80029a6 <_puts_r+0x9a>
 80029a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029a2:	f000 fab2 	bl	8002f0a <__retarget_lock_release_recursive>
 80029a6:	4628      	mov	r0, r5
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da04      	bge.n	80029b8 <_puts_r+0xac>
 80029ae:	69a2      	ldr	r2, [r4, #24]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	dc06      	bgt.n	80029c2 <_puts_r+0xb6>
 80029b4:	290a      	cmp	r1, #10
 80029b6:	d004      	beq.n	80029c2 <_puts_r+0xb6>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	6022      	str	r2, [r4, #0]
 80029be:	7019      	strb	r1, [r3, #0]
 80029c0:	e7c5      	b.n	800294e <_puts_r+0x42>
 80029c2:	4622      	mov	r2, r4
 80029c4:	4628      	mov	r0, r5
 80029c6:	f000 f827 	bl	8002a18 <__swbuf_r>
 80029ca:	3001      	adds	r0, #1
 80029cc:	d1bf      	bne.n	800294e <_puts_r+0x42>
 80029ce:	e7df      	b.n	8002990 <_puts_r+0x84>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	250a      	movs	r5, #10
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	6022      	str	r2, [r4, #0]
 80029d8:	701d      	strb	r5, [r3, #0]
 80029da:	e7db      	b.n	8002994 <_puts_r+0x88>
 80029dc:	080037a8 	.word	0x080037a8
 80029e0:	080037c8 	.word	0x080037c8
 80029e4:	08003788 	.word	0x08003788

080029e8 <puts>:
 80029e8:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <puts+0xc>)
 80029ea:	4601      	mov	r1, r0
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	f7ff bf8d 	b.w	800290c <_puts_r>
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c

080029f8 <_sbrk_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d06      	ldr	r5, [pc, #24]	; (8002a14 <_sbrk_r+0x1c>)
 80029fc:	2300      	movs	r3, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	602b      	str	r3, [r5, #0]
 8002a04:	f7fe fa8e 	bl	8000f24 <_sbrk>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d102      	bne.n	8002a12 <_sbrk_r+0x1a>
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	b103      	cbz	r3, 8002a12 <_sbrk_r+0x1a>
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
 8002a14:	200000ec 	.word	0x200000ec

08002a18 <__swbuf_r>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	460e      	mov	r6, r1
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	4605      	mov	r5, r0
 8002a20:	b118      	cbz	r0, 8002a2a <__swbuf_r+0x12>
 8002a22:	6983      	ldr	r3, [r0, #24]
 8002a24:	b90b      	cbnz	r3, 8002a2a <__swbuf_r+0x12>
 8002a26:	f000 f9d1 	bl	8002dcc <__sinit>
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <__swbuf_r+0x98>)
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	d12b      	bne.n	8002a88 <__swbuf_r+0x70>
 8002a30:	686c      	ldr	r4, [r5, #4]
 8002a32:	69a3      	ldr	r3, [r4, #24]
 8002a34:	60a3      	str	r3, [r4, #8]
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	071a      	lsls	r2, r3, #28
 8002a3a:	d52f      	bpl.n	8002a9c <__swbuf_r+0x84>
 8002a3c:	6923      	ldr	r3, [r4, #16]
 8002a3e:	b36b      	cbz	r3, 8002a9c <__swbuf_r+0x84>
 8002a40:	6923      	ldr	r3, [r4, #16]
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1ac0      	subs	r0, r0, r3
 8002a46:	6963      	ldr	r3, [r4, #20]
 8002a48:	b2f6      	uxtb	r6, r6
 8002a4a:	4283      	cmp	r3, r0
 8002a4c:	4637      	mov	r7, r6
 8002a4e:	dc04      	bgt.n	8002a5a <__swbuf_r+0x42>
 8002a50:	4621      	mov	r1, r4
 8002a52:	4628      	mov	r0, r5
 8002a54:	f000 f926 	bl	8002ca4 <_fflush_r>
 8002a58:	bb30      	cbnz	r0, 8002aa8 <__swbuf_r+0x90>
 8002a5a:	68a3      	ldr	r3, [r4, #8]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60a3      	str	r3, [r4, #8]
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	6022      	str	r2, [r4, #0]
 8002a66:	701e      	strb	r6, [r3, #0]
 8002a68:	6963      	ldr	r3, [r4, #20]
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	4283      	cmp	r3, r0
 8002a6e:	d004      	beq.n	8002a7a <__swbuf_r+0x62>
 8002a70:	89a3      	ldrh	r3, [r4, #12]
 8002a72:	07db      	lsls	r3, r3, #31
 8002a74:	d506      	bpl.n	8002a84 <__swbuf_r+0x6c>
 8002a76:	2e0a      	cmp	r6, #10
 8002a78:	d104      	bne.n	8002a84 <__swbuf_r+0x6c>
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f000 f911 	bl	8002ca4 <_fflush_r>
 8002a82:	b988      	cbnz	r0, 8002aa8 <__swbuf_r+0x90>
 8002a84:	4638      	mov	r0, r7
 8002a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <__swbuf_r+0x9c>)
 8002a8a:	429c      	cmp	r4, r3
 8002a8c:	d101      	bne.n	8002a92 <__swbuf_r+0x7a>
 8002a8e:	68ac      	ldr	r4, [r5, #8]
 8002a90:	e7cf      	b.n	8002a32 <__swbuf_r+0x1a>
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <__swbuf_r+0xa0>)
 8002a94:	429c      	cmp	r4, r3
 8002a96:	bf08      	it	eq
 8002a98:	68ec      	ldreq	r4, [r5, #12]
 8002a9a:	e7ca      	b.n	8002a32 <__swbuf_r+0x1a>
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f000 f80c 	bl	8002abc <__swsetup_r>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d0cb      	beq.n	8002a40 <__swbuf_r+0x28>
 8002aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8002aac:	e7ea      	b.n	8002a84 <__swbuf_r+0x6c>
 8002aae:	bf00      	nop
 8002ab0:	080037a8 	.word	0x080037a8
 8002ab4:	080037c8 	.word	0x080037c8
 8002ab8:	08003788 	.word	0x08003788

08002abc <__swsetup_r>:
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <__swsetup_r+0xcc>)
 8002abe:	b570      	push	{r4, r5, r6, lr}
 8002ac0:	681d      	ldr	r5, [r3, #0]
 8002ac2:	4606      	mov	r6, r0
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	b125      	cbz	r5, 8002ad2 <__swsetup_r+0x16>
 8002ac8:	69ab      	ldr	r3, [r5, #24]
 8002aca:	b913      	cbnz	r3, 8002ad2 <__swsetup_r+0x16>
 8002acc:	4628      	mov	r0, r5
 8002ace:	f000 f97d 	bl	8002dcc <__sinit>
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <__swsetup_r+0xd0>)
 8002ad4:	429c      	cmp	r4, r3
 8002ad6:	d10f      	bne.n	8002af8 <__swsetup_r+0x3c>
 8002ad8:	686c      	ldr	r4, [r5, #4]
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ae0:	0719      	lsls	r1, r3, #28
 8002ae2:	d42c      	bmi.n	8002b3e <__swsetup_r+0x82>
 8002ae4:	06dd      	lsls	r5, r3, #27
 8002ae6:	d411      	bmi.n	8002b0c <__swsetup_r+0x50>
 8002ae8:	2309      	movs	r3, #9
 8002aea:	6033      	str	r3, [r6, #0]
 8002aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002af0:	81a3      	strh	r3, [r4, #12]
 8002af2:	f04f 30ff 	mov.w	r0, #4294967295
 8002af6:	e03e      	b.n	8002b76 <__swsetup_r+0xba>
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <__swsetup_r+0xd4>)
 8002afa:	429c      	cmp	r4, r3
 8002afc:	d101      	bne.n	8002b02 <__swsetup_r+0x46>
 8002afe:	68ac      	ldr	r4, [r5, #8]
 8002b00:	e7eb      	b.n	8002ada <__swsetup_r+0x1e>
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <__swsetup_r+0xd8>)
 8002b04:	429c      	cmp	r4, r3
 8002b06:	bf08      	it	eq
 8002b08:	68ec      	ldreq	r4, [r5, #12]
 8002b0a:	e7e6      	b.n	8002ada <__swsetup_r+0x1e>
 8002b0c:	0758      	lsls	r0, r3, #29
 8002b0e:	d512      	bpl.n	8002b36 <__swsetup_r+0x7a>
 8002b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b12:	b141      	cbz	r1, 8002b26 <__swsetup_r+0x6a>
 8002b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b18:	4299      	cmp	r1, r3
 8002b1a:	d002      	beq.n	8002b22 <__swsetup_r+0x66>
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f7ff fe33 	bl	8002788 <_free_r>
 8002b22:	2300      	movs	r3, #0
 8002b24:	6363      	str	r3, [r4, #52]	; 0x34
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b2c:	81a3      	strh	r3, [r4, #12]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	6063      	str	r3, [r4, #4]
 8002b32:	6923      	ldr	r3, [r4, #16]
 8002b34:	6023      	str	r3, [r4, #0]
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	81a3      	strh	r3, [r4, #12]
 8002b3e:	6923      	ldr	r3, [r4, #16]
 8002b40:	b94b      	cbnz	r3, 8002b56 <__swsetup_r+0x9a>
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d003      	beq.n	8002b56 <__swsetup_r+0x9a>
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4630      	mov	r0, r6
 8002b52:	f000 f9ff 	bl	8002f54 <__smakebuf_r>
 8002b56:	89a0      	ldrh	r0, [r4, #12]
 8002b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b5c:	f010 0301 	ands.w	r3, r0, #1
 8002b60:	d00a      	beq.n	8002b78 <__swsetup_r+0xbc>
 8002b62:	2300      	movs	r3, #0
 8002b64:	60a3      	str	r3, [r4, #8]
 8002b66:	6963      	ldr	r3, [r4, #20]
 8002b68:	425b      	negs	r3, r3
 8002b6a:	61a3      	str	r3, [r4, #24]
 8002b6c:	6923      	ldr	r3, [r4, #16]
 8002b6e:	b943      	cbnz	r3, 8002b82 <__swsetup_r+0xc6>
 8002b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b74:	d1ba      	bne.n	8002aec <__swsetup_r+0x30>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	0781      	lsls	r1, r0, #30
 8002b7a:	bf58      	it	pl
 8002b7c:	6963      	ldrpl	r3, [r4, #20]
 8002b7e:	60a3      	str	r3, [r4, #8]
 8002b80:	e7f4      	b.n	8002b6c <__swsetup_r+0xb0>
 8002b82:	2000      	movs	r0, #0
 8002b84:	e7f7      	b.n	8002b76 <__swsetup_r+0xba>
 8002b86:	bf00      	nop
 8002b88:	2000000c 	.word	0x2000000c
 8002b8c:	080037a8 	.word	0x080037a8
 8002b90:	080037c8 	.word	0x080037c8
 8002b94:	08003788 	.word	0x08003788

08002b98 <__sflush_r>:
 8002b98:	898a      	ldrh	r2, [r1, #12]
 8002b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	0710      	lsls	r0, r2, #28
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	d458      	bmi.n	8002c58 <__sflush_r+0xc0>
 8002ba6:	684b      	ldr	r3, [r1, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	dc05      	bgt.n	8002bb8 <__sflush_r+0x20>
 8002bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	dc02      	bgt.n	8002bb8 <__sflush_r+0x20>
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bba:	2e00      	cmp	r6, #0
 8002bbc:	d0f9      	beq.n	8002bb2 <__sflush_r+0x1a>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bc4:	682f      	ldr	r7, [r5, #0]
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	d032      	beq.n	8002c30 <__sflush_r+0x98>
 8002bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	075a      	lsls	r2, r3, #29
 8002bd0:	d505      	bpl.n	8002bde <__sflush_r+0x46>
 8002bd2:	6863      	ldr	r3, [r4, #4]
 8002bd4:	1ac0      	subs	r0, r0, r3
 8002bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bd8:	b10b      	cbz	r3, 8002bde <__sflush_r+0x46>
 8002bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bdc:	1ac0      	subs	r0, r0, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	4602      	mov	r2, r0
 8002be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002be4:	6a21      	ldr	r1, [r4, #32]
 8002be6:	4628      	mov	r0, r5
 8002be8:	47b0      	blx	r6
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	89a3      	ldrh	r3, [r4, #12]
 8002bee:	d106      	bne.n	8002bfe <__sflush_r+0x66>
 8002bf0:	6829      	ldr	r1, [r5, #0]
 8002bf2:	291d      	cmp	r1, #29
 8002bf4:	d82c      	bhi.n	8002c50 <__sflush_r+0xb8>
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <__sflush_r+0x108>)
 8002bf8:	40ca      	lsrs	r2, r1
 8002bfa:	07d6      	lsls	r6, r2, #31
 8002bfc:	d528      	bpl.n	8002c50 <__sflush_r+0xb8>
 8002bfe:	2200      	movs	r2, #0
 8002c00:	6062      	str	r2, [r4, #4]
 8002c02:	04d9      	lsls	r1, r3, #19
 8002c04:	6922      	ldr	r2, [r4, #16]
 8002c06:	6022      	str	r2, [r4, #0]
 8002c08:	d504      	bpl.n	8002c14 <__sflush_r+0x7c>
 8002c0a:	1c42      	adds	r2, r0, #1
 8002c0c:	d101      	bne.n	8002c12 <__sflush_r+0x7a>
 8002c0e:	682b      	ldr	r3, [r5, #0]
 8002c10:	b903      	cbnz	r3, 8002c14 <__sflush_r+0x7c>
 8002c12:	6560      	str	r0, [r4, #84]	; 0x54
 8002c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c16:	602f      	str	r7, [r5, #0]
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	d0ca      	beq.n	8002bb2 <__sflush_r+0x1a>
 8002c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c20:	4299      	cmp	r1, r3
 8002c22:	d002      	beq.n	8002c2a <__sflush_r+0x92>
 8002c24:	4628      	mov	r0, r5
 8002c26:	f7ff fdaf 	bl	8002788 <_free_r>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8002c2e:	e7c1      	b.n	8002bb4 <__sflush_r+0x1c>
 8002c30:	6a21      	ldr	r1, [r4, #32]
 8002c32:	2301      	movs	r3, #1
 8002c34:	4628      	mov	r0, r5
 8002c36:	47b0      	blx	r6
 8002c38:	1c41      	adds	r1, r0, #1
 8002c3a:	d1c7      	bne.n	8002bcc <__sflush_r+0x34>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0c4      	beq.n	8002bcc <__sflush_r+0x34>
 8002c42:	2b1d      	cmp	r3, #29
 8002c44:	d001      	beq.n	8002c4a <__sflush_r+0xb2>
 8002c46:	2b16      	cmp	r3, #22
 8002c48:	d101      	bne.n	8002c4e <__sflush_r+0xb6>
 8002c4a:	602f      	str	r7, [r5, #0]
 8002c4c:	e7b1      	b.n	8002bb2 <__sflush_r+0x1a>
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	e7ad      	b.n	8002bb4 <__sflush_r+0x1c>
 8002c58:	690f      	ldr	r7, [r1, #16]
 8002c5a:	2f00      	cmp	r7, #0
 8002c5c:	d0a9      	beq.n	8002bb2 <__sflush_r+0x1a>
 8002c5e:	0793      	lsls	r3, r2, #30
 8002c60:	680e      	ldr	r6, [r1, #0]
 8002c62:	bf08      	it	eq
 8002c64:	694b      	ldreq	r3, [r1, #20]
 8002c66:	600f      	str	r7, [r1, #0]
 8002c68:	bf18      	it	ne
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	eba6 0807 	sub.w	r8, r6, r7
 8002c70:	608b      	str	r3, [r1, #8]
 8002c72:	f1b8 0f00 	cmp.w	r8, #0
 8002c76:	dd9c      	ble.n	8002bb2 <__sflush_r+0x1a>
 8002c78:	6a21      	ldr	r1, [r4, #32]
 8002c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c7c:	4643      	mov	r3, r8
 8002c7e:	463a      	mov	r2, r7
 8002c80:	4628      	mov	r0, r5
 8002c82:	47b0      	blx	r6
 8002c84:	2800      	cmp	r0, #0
 8002c86:	dc06      	bgt.n	8002c96 <__sflush_r+0xfe>
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	e78e      	b.n	8002bb4 <__sflush_r+0x1c>
 8002c96:	4407      	add	r7, r0
 8002c98:	eba8 0800 	sub.w	r8, r8, r0
 8002c9c:	e7e9      	b.n	8002c72 <__sflush_r+0xda>
 8002c9e:	bf00      	nop
 8002ca0:	20400001 	.word	0x20400001

08002ca4 <_fflush_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	690b      	ldr	r3, [r1, #16]
 8002ca8:	4605      	mov	r5, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	b913      	cbnz	r3, 8002cb4 <_fflush_r+0x10>
 8002cae:	2500      	movs	r5, #0
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
 8002cb4:	b118      	cbz	r0, 8002cbe <_fflush_r+0x1a>
 8002cb6:	6983      	ldr	r3, [r0, #24]
 8002cb8:	b90b      	cbnz	r3, 8002cbe <_fflush_r+0x1a>
 8002cba:	f000 f887 	bl	8002dcc <__sinit>
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <_fflush_r+0x6c>)
 8002cc0:	429c      	cmp	r4, r3
 8002cc2:	d11b      	bne.n	8002cfc <_fflush_r+0x58>
 8002cc4:	686c      	ldr	r4, [r5, #4]
 8002cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ef      	beq.n	8002cae <_fflush_r+0xa>
 8002cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cd0:	07d0      	lsls	r0, r2, #31
 8002cd2:	d404      	bmi.n	8002cde <_fflush_r+0x3a>
 8002cd4:	0599      	lsls	r1, r3, #22
 8002cd6:	d402      	bmi.n	8002cde <_fflush_r+0x3a>
 8002cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cda:	f000 f915 	bl	8002f08 <__retarget_lock_acquire_recursive>
 8002cde:	4628      	mov	r0, r5
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	f7ff ff59 	bl	8002b98 <__sflush_r>
 8002ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ce8:	07da      	lsls	r2, r3, #31
 8002cea:	4605      	mov	r5, r0
 8002cec:	d4e0      	bmi.n	8002cb0 <_fflush_r+0xc>
 8002cee:	89a3      	ldrh	r3, [r4, #12]
 8002cf0:	059b      	lsls	r3, r3, #22
 8002cf2:	d4dd      	bmi.n	8002cb0 <_fflush_r+0xc>
 8002cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cf6:	f000 f908 	bl	8002f0a <__retarget_lock_release_recursive>
 8002cfa:	e7d9      	b.n	8002cb0 <_fflush_r+0xc>
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <_fflush_r+0x70>)
 8002cfe:	429c      	cmp	r4, r3
 8002d00:	d101      	bne.n	8002d06 <_fflush_r+0x62>
 8002d02:	68ac      	ldr	r4, [r5, #8]
 8002d04:	e7df      	b.n	8002cc6 <_fflush_r+0x22>
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <_fflush_r+0x74>)
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	bf08      	it	eq
 8002d0c:	68ec      	ldreq	r4, [r5, #12]
 8002d0e:	e7da      	b.n	8002cc6 <_fflush_r+0x22>
 8002d10:	080037a8 	.word	0x080037a8
 8002d14:	080037c8 	.word	0x080037c8
 8002d18:	08003788 	.word	0x08003788

08002d1c <std>:
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	4604      	mov	r4, r0
 8002d22:	e9c0 3300 	strd	r3, r3, [r0]
 8002d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d2a:	6083      	str	r3, [r0, #8]
 8002d2c:	8181      	strh	r1, [r0, #12]
 8002d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d30:	81c2      	strh	r2, [r0, #14]
 8002d32:	6183      	str	r3, [r0, #24]
 8002d34:	4619      	mov	r1, r3
 8002d36:	2208      	movs	r2, #8
 8002d38:	305c      	adds	r0, #92	; 0x5c
 8002d3a:	f7ff fd1d 	bl	8002778 <memset>
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <std+0x38>)
 8002d40:	6263      	str	r3, [r4, #36]	; 0x24
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <std+0x3c>)
 8002d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <std+0x40>)
 8002d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <std+0x44>)
 8002d4c:	6224      	str	r4, [r4, #32]
 8002d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	080035c9 	.word	0x080035c9
 8002d58:	080035eb 	.word	0x080035eb
 8002d5c:	08003623 	.word	0x08003623
 8002d60:	08003647 	.word	0x08003647

08002d64 <_cleanup_r>:
 8002d64:	4901      	ldr	r1, [pc, #4]	; (8002d6c <_cleanup_r+0x8>)
 8002d66:	f000 b8af 	b.w	8002ec8 <_fwalk_reent>
 8002d6a:	bf00      	nop
 8002d6c:	08002ca5 	.word	0x08002ca5

08002d70 <__sfmoreglue>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	1e4a      	subs	r2, r1, #1
 8002d74:	2568      	movs	r5, #104	; 0x68
 8002d76:	4355      	muls	r5, r2
 8002d78:	460e      	mov	r6, r1
 8002d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d7e:	f7ff fd53 	bl	8002828 <_malloc_r>
 8002d82:	4604      	mov	r4, r0
 8002d84:	b140      	cbz	r0, 8002d98 <__sfmoreglue+0x28>
 8002d86:	2100      	movs	r1, #0
 8002d88:	e9c0 1600 	strd	r1, r6, [r0]
 8002d8c:	300c      	adds	r0, #12
 8002d8e:	60a0      	str	r0, [r4, #8]
 8002d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d94:	f7ff fcf0 	bl	8002778 <memset>
 8002d98:	4620      	mov	r0, r4
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}

08002d9c <__sfp_lock_acquire>:
 8002d9c:	4801      	ldr	r0, [pc, #4]	; (8002da4 <__sfp_lock_acquire+0x8>)
 8002d9e:	f000 b8b3 	b.w	8002f08 <__retarget_lock_acquire_recursive>
 8002da2:	bf00      	nop
 8002da4:	200000e8 	.word	0x200000e8

08002da8 <__sfp_lock_release>:
 8002da8:	4801      	ldr	r0, [pc, #4]	; (8002db0 <__sfp_lock_release+0x8>)
 8002daa:	f000 b8ae 	b.w	8002f0a <__retarget_lock_release_recursive>
 8002dae:	bf00      	nop
 8002db0:	200000e8 	.word	0x200000e8

08002db4 <__sinit_lock_acquire>:
 8002db4:	4801      	ldr	r0, [pc, #4]	; (8002dbc <__sinit_lock_acquire+0x8>)
 8002db6:	f000 b8a7 	b.w	8002f08 <__retarget_lock_acquire_recursive>
 8002dba:	bf00      	nop
 8002dbc:	200000e3 	.word	0x200000e3

08002dc0 <__sinit_lock_release>:
 8002dc0:	4801      	ldr	r0, [pc, #4]	; (8002dc8 <__sinit_lock_release+0x8>)
 8002dc2:	f000 b8a2 	b.w	8002f0a <__retarget_lock_release_recursive>
 8002dc6:	bf00      	nop
 8002dc8:	200000e3 	.word	0x200000e3

08002dcc <__sinit>:
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	4604      	mov	r4, r0
 8002dd0:	f7ff fff0 	bl	8002db4 <__sinit_lock_acquire>
 8002dd4:	69a3      	ldr	r3, [r4, #24]
 8002dd6:	b11b      	cbz	r3, 8002de0 <__sinit+0x14>
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ddc:	f7ff bff0 	b.w	8002dc0 <__sinit_lock_release>
 8002de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002de4:	6523      	str	r3, [r4, #80]	; 0x50
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <__sinit+0x68>)
 8002de8:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <__sinit+0x6c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	bf04      	itt	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	61a3      	streq	r3, [r4, #24]
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 f820 	bl	8002e3c <__sfp>
 8002dfc:	6060      	str	r0, [r4, #4]
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f000 f81c 	bl	8002e3c <__sfp>
 8002e04:	60a0      	str	r0, [r4, #8]
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 f818 	bl	8002e3c <__sfp>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	60e0      	str	r0, [r4, #12]
 8002e10:	2104      	movs	r1, #4
 8002e12:	6860      	ldr	r0, [r4, #4]
 8002e14:	f7ff ff82 	bl	8002d1c <std>
 8002e18:	68a0      	ldr	r0, [r4, #8]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2109      	movs	r1, #9
 8002e1e:	f7ff ff7d 	bl	8002d1c <std>
 8002e22:	68e0      	ldr	r0, [r4, #12]
 8002e24:	2202      	movs	r2, #2
 8002e26:	2112      	movs	r1, #18
 8002e28:	f7ff ff78 	bl	8002d1c <std>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61a3      	str	r3, [r4, #24]
 8002e30:	e7d2      	b.n	8002dd8 <__sinit+0xc>
 8002e32:	bf00      	nop
 8002e34:	08003784 	.word	0x08003784
 8002e38:	08002d65 	.word	0x08002d65

08002e3c <__sfp>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	4607      	mov	r7, r0
 8002e40:	f7ff ffac 	bl	8002d9c <__sfp_lock_acquire>
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <__sfp+0x84>)
 8002e46:	681e      	ldr	r6, [r3, #0]
 8002e48:	69b3      	ldr	r3, [r6, #24]
 8002e4a:	b913      	cbnz	r3, 8002e52 <__sfp+0x16>
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f7ff ffbd 	bl	8002dcc <__sinit>
 8002e52:	3648      	adds	r6, #72	; 0x48
 8002e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	d503      	bpl.n	8002e64 <__sfp+0x28>
 8002e5c:	6833      	ldr	r3, [r6, #0]
 8002e5e:	b30b      	cbz	r3, 8002ea4 <__sfp+0x68>
 8002e60:	6836      	ldr	r6, [r6, #0]
 8002e62:	e7f7      	b.n	8002e54 <__sfp+0x18>
 8002e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e68:	b9d5      	cbnz	r5, 8002ea0 <__sfp+0x64>
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <__sfp+0x88>)
 8002e6c:	60e3      	str	r3, [r4, #12]
 8002e6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e72:	6665      	str	r5, [r4, #100]	; 0x64
 8002e74:	f000 f847 	bl	8002f06 <__retarget_lock_init_recursive>
 8002e78:	f7ff ff96 	bl	8002da8 <__sfp_lock_release>
 8002e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e84:	6025      	str	r5, [r4, #0]
 8002e86:	61a5      	str	r5, [r4, #24]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e90:	f7ff fc72 	bl	8002778 <memset>
 8002e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea0:	3468      	adds	r4, #104	; 0x68
 8002ea2:	e7d9      	b.n	8002e58 <__sfp+0x1c>
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	f7ff ff62 	bl	8002d70 <__sfmoreglue>
 8002eac:	4604      	mov	r4, r0
 8002eae:	6030      	str	r0, [r6, #0]
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1d5      	bne.n	8002e60 <__sfp+0x24>
 8002eb4:	f7ff ff78 	bl	8002da8 <__sfp_lock_release>
 8002eb8:	230c      	movs	r3, #12
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	e7ee      	b.n	8002e9c <__sfp+0x60>
 8002ebe:	bf00      	nop
 8002ec0:	08003784 	.word	0x08003784
 8002ec4:	ffff0001 	.word	0xffff0001

08002ec8 <_fwalk_reent>:
 8002ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ecc:	4606      	mov	r6, r0
 8002ece:	4688      	mov	r8, r1
 8002ed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ed4:	2700      	movs	r7, #0
 8002ed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002eda:	f1b9 0901 	subs.w	r9, r9, #1
 8002ede:	d505      	bpl.n	8002eec <_fwalk_reent+0x24>
 8002ee0:	6824      	ldr	r4, [r4, #0]
 8002ee2:	2c00      	cmp	r4, #0
 8002ee4:	d1f7      	bne.n	8002ed6 <_fwalk_reent+0xe>
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eec:	89ab      	ldrh	r3, [r5, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d907      	bls.n	8002f02 <_fwalk_reent+0x3a>
 8002ef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	d003      	beq.n	8002f02 <_fwalk_reent+0x3a>
 8002efa:	4629      	mov	r1, r5
 8002efc:	4630      	mov	r0, r6
 8002efe:	47c0      	blx	r8
 8002f00:	4307      	orrs	r7, r0
 8002f02:	3568      	adds	r5, #104	; 0x68
 8002f04:	e7e9      	b.n	8002eda <_fwalk_reent+0x12>

08002f06 <__retarget_lock_init_recursive>:
 8002f06:	4770      	bx	lr

08002f08 <__retarget_lock_acquire_recursive>:
 8002f08:	4770      	bx	lr

08002f0a <__retarget_lock_release_recursive>:
 8002f0a:	4770      	bx	lr

08002f0c <__swhatbuf_r>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	460e      	mov	r6, r1
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	b096      	sub	sp, #88	; 0x58
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	da07      	bge.n	8002f2e <__swhatbuf_r+0x22>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	89b3      	ldrh	r3, [r6, #12]
 8002f24:	061a      	lsls	r2, r3, #24
 8002f26:	d410      	bmi.n	8002f4a <__swhatbuf_r+0x3e>
 8002f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f2c:	e00e      	b.n	8002f4c <__swhatbuf_r+0x40>
 8002f2e:	466a      	mov	r2, sp
 8002f30:	f000 fbb0 	bl	8003694 <_fstat_r>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	dbf2      	blt.n	8002f1e <__swhatbuf_r+0x12>
 8002f38:	9a01      	ldr	r2, [sp, #4]
 8002f3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f42:	425a      	negs	r2, r3
 8002f44:	415a      	adcs	r2, r3
 8002f46:	602a      	str	r2, [r5, #0]
 8002f48:	e7ee      	b.n	8002f28 <__swhatbuf_r+0x1c>
 8002f4a:	2340      	movs	r3, #64	; 0x40
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	b016      	add	sp, #88	; 0x58
 8002f52:	bd70      	pop	{r4, r5, r6, pc}

08002f54 <__smakebuf_r>:
 8002f54:	898b      	ldrh	r3, [r1, #12]
 8002f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f58:	079d      	lsls	r5, r3, #30
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	d507      	bpl.n	8002f70 <__smakebuf_r+0x1c>
 8002f60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	6123      	str	r3, [r4, #16]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6163      	str	r3, [r4, #20]
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	ab01      	add	r3, sp, #4
 8002f72:	466a      	mov	r2, sp
 8002f74:	f7ff ffca 	bl	8002f0c <__swhatbuf_r>
 8002f78:	9900      	ldr	r1, [sp, #0]
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f7ff fc53 	bl	8002828 <_malloc_r>
 8002f82:	b948      	cbnz	r0, 8002f98 <__smakebuf_r+0x44>
 8002f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f88:	059a      	lsls	r2, r3, #22
 8002f8a:	d4ef      	bmi.n	8002f6c <__smakebuf_r+0x18>
 8002f8c:	f023 0303 	bic.w	r3, r3, #3
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	e7e3      	b.n	8002f60 <__smakebuf_r+0xc>
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <__smakebuf_r+0x7c>)
 8002f9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	6020      	str	r0, [r4, #0]
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	9b00      	ldr	r3, [sp, #0]
 8002fa8:	6163      	str	r3, [r4, #20]
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	6120      	str	r0, [r4, #16]
 8002fae:	b15b      	cbz	r3, 8002fc8 <__smakebuf_r+0x74>
 8002fb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f000 fb7f 	bl	80036b8 <_isatty_r>
 8002fba:	b128      	cbz	r0, 8002fc8 <__smakebuf_r+0x74>
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	89a0      	ldrh	r0, [r4, #12]
 8002fca:	4305      	orrs	r5, r0
 8002fcc:	81a5      	strh	r5, [r4, #12]
 8002fce:	e7cd      	b.n	8002f6c <__smakebuf_r+0x18>
 8002fd0:	08002d65 	.word	0x08002d65

08002fd4 <__malloc_lock>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	; (8002fdc <__malloc_lock+0x8>)
 8002fd6:	f7ff bf97 	b.w	8002f08 <__retarget_lock_acquire_recursive>
 8002fda:	bf00      	nop
 8002fdc:	200000e4 	.word	0x200000e4

08002fe0 <__malloc_unlock>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	; (8002fe8 <__malloc_unlock+0x8>)
 8002fe2:	f7ff bf92 	b.w	8002f0a <__retarget_lock_release_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	200000e4 	.word	0x200000e4

08002fec <__sfputc_r>:
 8002fec:	6893      	ldr	r3, [r2, #8]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	b410      	push	{r4}
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	da08      	bge.n	800300a <__sfputc_r+0x1e>
 8002ff8:	6994      	ldr	r4, [r2, #24]
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	db01      	blt.n	8003002 <__sfputc_r+0x16>
 8002ffe:	290a      	cmp	r1, #10
 8003000:	d103      	bne.n	800300a <__sfputc_r+0x1e>
 8003002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003006:	f7ff bd07 	b.w	8002a18 <__swbuf_r>
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	1c58      	adds	r0, r3, #1
 800300e:	6010      	str	r0, [r2, #0]
 8003010:	7019      	strb	r1, [r3, #0]
 8003012:	4608      	mov	r0, r1
 8003014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003018:	4770      	bx	lr

0800301a <__sfputs_r>:
 800301a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301c:	4606      	mov	r6, r0
 800301e:	460f      	mov	r7, r1
 8003020:	4614      	mov	r4, r2
 8003022:	18d5      	adds	r5, r2, r3
 8003024:	42ac      	cmp	r4, r5
 8003026:	d101      	bne.n	800302c <__sfputs_r+0x12>
 8003028:	2000      	movs	r0, #0
 800302a:	e007      	b.n	800303c <__sfputs_r+0x22>
 800302c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003030:	463a      	mov	r2, r7
 8003032:	4630      	mov	r0, r6
 8003034:	f7ff ffda 	bl	8002fec <__sfputc_r>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d1f3      	bne.n	8003024 <__sfputs_r+0xa>
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003040 <_vfiprintf_r>:
 8003040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003044:	460d      	mov	r5, r1
 8003046:	b09d      	sub	sp, #116	; 0x74
 8003048:	4614      	mov	r4, r2
 800304a:	4698      	mov	r8, r3
 800304c:	4606      	mov	r6, r0
 800304e:	b118      	cbz	r0, 8003058 <_vfiprintf_r+0x18>
 8003050:	6983      	ldr	r3, [r0, #24]
 8003052:	b90b      	cbnz	r3, 8003058 <_vfiprintf_r+0x18>
 8003054:	f7ff feba 	bl	8002dcc <__sinit>
 8003058:	4b89      	ldr	r3, [pc, #548]	; (8003280 <_vfiprintf_r+0x240>)
 800305a:	429d      	cmp	r5, r3
 800305c:	d11b      	bne.n	8003096 <_vfiprintf_r+0x56>
 800305e:	6875      	ldr	r5, [r6, #4]
 8003060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003062:	07d9      	lsls	r1, r3, #31
 8003064:	d405      	bmi.n	8003072 <_vfiprintf_r+0x32>
 8003066:	89ab      	ldrh	r3, [r5, #12]
 8003068:	059a      	lsls	r2, r3, #22
 800306a:	d402      	bmi.n	8003072 <_vfiprintf_r+0x32>
 800306c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800306e:	f7ff ff4b 	bl	8002f08 <__retarget_lock_acquire_recursive>
 8003072:	89ab      	ldrh	r3, [r5, #12]
 8003074:	071b      	lsls	r3, r3, #28
 8003076:	d501      	bpl.n	800307c <_vfiprintf_r+0x3c>
 8003078:	692b      	ldr	r3, [r5, #16]
 800307a:	b9eb      	cbnz	r3, 80030b8 <_vfiprintf_r+0x78>
 800307c:	4629      	mov	r1, r5
 800307e:	4630      	mov	r0, r6
 8003080:	f7ff fd1c 	bl	8002abc <__swsetup_r>
 8003084:	b1c0      	cbz	r0, 80030b8 <_vfiprintf_r+0x78>
 8003086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003088:	07dc      	lsls	r4, r3, #31
 800308a:	d50e      	bpl.n	80030aa <_vfiprintf_r+0x6a>
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	b01d      	add	sp, #116	; 0x74
 8003092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003096:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <_vfiprintf_r+0x244>)
 8003098:	429d      	cmp	r5, r3
 800309a:	d101      	bne.n	80030a0 <_vfiprintf_r+0x60>
 800309c:	68b5      	ldr	r5, [r6, #8]
 800309e:	e7df      	b.n	8003060 <_vfiprintf_r+0x20>
 80030a0:	4b79      	ldr	r3, [pc, #484]	; (8003288 <_vfiprintf_r+0x248>)
 80030a2:	429d      	cmp	r5, r3
 80030a4:	bf08      	it	eq
 80030a6:	68f5      	ldreq	r5, [r6, #12]
 80030a8:	e7da      	b.n	8003060 <_vfiprintf_r+0x20>
 80030aa:	89ab      	ldrh	r3, [r5, #12]
 80030ac:	0598      	lsls	r0, r3, #22
 80030ae:	d4ed      	bmi.n	800308c <_vfiprintf_r+0x4c>
 80030b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030b2:	f7ff ff2a 	bl	8002f0a <__retarget_lock_release_recursive>
 80030b6:	e7e9      	b.n	800308c <_vfiprintf_r+0x4c>
 80030b8:	2300      	movs	r3, #0
 80030ba:	9309      	str	r3, [sp, #36]	; 0x24
 80030bc:	2320      	movs	r3, #32
 80030be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80030c6:	2330      	movs	r3, #48	; 0x30
 80030c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800328c <_vfiprintf_r+0x24c>
 80030cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030d0:	f04f 0901 	mov.w	r9, #1
 80030d4:	4623      	mov	r3, r4
 80030d6:	469a      	mov	sl, r3
 80030d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030dc:	b10a      	cbz	r2, 80030e2 <_vfiprintf_r+0xa2>
 80030de:	2a25      	cmp	r2, #37	; 0x25
 80030e0:	d1f9      	bne.n	80030d6 <_vfiprintf_r+0x96>
 80030e2:	ebba 0b04 	subs.w	fp, sl, r4
 80030e6:	d00b      	beq.n	8003100 <_vfiprintf_r+0xc0>
 80030e8:	465b      	mov	r3, fp
 80030ea:	4622      	mov	r2, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	4630      	mov	r0, r6
 80030f0:	f7ff ff93 	bl	800301a <__sfputs_r>
 80030f4:	3001      	adds	r0, #1
 80030f6:	f000 80aa 	beq.w	800324e <_vfiprintf_r+0x20e>
 80030fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030fc:	445a      	add	r2, fp
 80030fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003100:	f89a 3000 	ldrb.w	r3, [sl]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a2 	beq.w	800324e <_vfiprintf_r+0x20e>
 800310a:	2300      	movs	r3, #0
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003114:	f10a 0a01 	add.w	sl, sl, #1
 8003118:	9304      	str	r3, [sp, #16]
 800311a:	9307      	str	r3, [sp, #28]
 800311c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003120:	931a      	str	r3, [sp, #104]	; 0x68
 8003122:	4654      	mov	r4, sl
 8003124:	2205      	movs	r2, #5
 8003126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800312a:	4858      	ldr	r0, [pc, #352]	; (800328c <_vfiprintf_r+0x24c>)
 800312c:	f7fd f870 	bl	8000210 <memchr>
 8003130:	9a04      	ldr	r2, [sp, #16]
 8003132:	b9d8      	cbnz	r0, 800316c <_vfiprintf_r+0x12c>
 8003134:	06d1      	lsls	r1, r2, #27
 8003136:	bf44      	itt	mi
 8003138:	2320      	movmi	r3, #32
 800313a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800313e:	0713      	lsls	r3, r2, #28
 8003140:	bf44      	itt	mi
 8003142:	232b      	movmi	r3, #43	; 0x2b
 8003144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003148:	f89a 3000 	ldrb.w	r3, [sl]
 800314c:	2b2a      	cmp	r3, #42	; 0x2a
 800314e:	d015      	beq.n	800317c <_vfiprintf_r+0x13c>
 8003150:	9a07      	ldr	r2, [sp, #28]
 8003152:	4654      	mov	r4, sl
 8003154:	2000      	movs	r0, #0
 8003156:	f04f 0c0a 	mov.w	ip, #10
 800315a:	4621      	mov	r1, r4
 800315c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003160:	3b30      	subs	r3, #48	; 0x30
 8003162:	2b09      	cmp	r3, #9
 8003164:	d94e      	bls.n	8003204 <_vfiprintf_r+0x1c4>
 8003166:	b1b0      	cbz	r0, 8003196 <_vfiprintf_r+0x156>
 8003168:	9207      	str	r2, [sp, #28]
 800316a:	e014      	b.n	8003196 <_vfiprintf_r+0x156>
 800316c:	eba0 0308 	sub.w	r3, r0, r8
 8003170:	fa09 f303 	lsl.w	r3, r9, r3
 8003174:	4313      	orrs	r3, r2
 8003176:	9304      	str	r3, [sp, #16]
 8003178:	46a2      	mov	sl, r4
 800317a:	e7d2      	b.n	8003122 <_vfiprintf_r+0xe2>
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	1d19      	adds	r1, r3, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	9103      	str	r1, [sp, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	bfbb      	ittet	lt
 8003188:	425b      	neglt	r3, r3
 800318a:	f042 0202 	orrlt.w	r2, r2, #2
 800318e:	9307      	strge	r3, [sp, #28]
 8003190:	9307      	strlt	r3, [sp, #28]
 8003192:	bfb8      	it	lt
 8003194:	9204      	strlt	r2, [sp, #16]
 8003196:	7823      	ldrb	r3, [r4, #0]
 8003198:	2b2e      	cmp	r3, #46	; 0x2e
 800319a:	d10c      	bne.n	80031b6 <_vfiprintf_r+0x176>
 800319c:	7863      	ldrb	r3, [r4, #1]
 800319e:	2b2a      	cmp	r3, #42	; 0x2a
 80031a0:	d135      	bne.n	800320e <_vfiprintf_r+0x1ce>
 80031a2:	9b03      	ldr	r3, [sp, #12]
 80031a4:	1d1a      	adds	r2, r3, #4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	9203      	str	r2, [sp, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bfb8      	it	lt
 80031ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80031b2:	3402      	adds	r4, #2
 80031b4:	9305      	str	r3, [sp, #20]
 80031b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800329c <_vfiprintf_r+0x25c>
 80031ba:	7821      	ldrb	r1, [r4, #0]
 80031bc:	2203      	movs	r2, #3
 80031be:	4650      	mov	r0, sl
 80031c0:	f7fd f826 	bl	8000210 <memchr>
 80031c4:	b140      	cbz	r0, 80031d8 <_vfiprintf_r+0x198>
 80031c6:	2340      	movs	r3, #64	; 0x40
 80031c8:	eba0 000a 	sub.w	r0, r0, sl
 80031cc:	fa03 f000 	lsl.w	r0, r3, r0
 80031d0:	9b04      	ldr	r3, [sp, #16]
 80031d2:	4303      	orrs	r3, r0
 80031d4:	3401      	adds	r4, #1
 80031d6:	9304      	str	r3, [sp, #16]
 80031d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031dc:	482c      	ldr	r0, [pc, #176]	; (8003290 <_vfiprintf_r+0x250>)
 80031de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031e2:	2206      	movs	r2, #6
 80031e4:	f7fd f814 	bl	8000210 <memchr>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d03f      	beq.n	800326c <_vfiprintf_r+0x22c>
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <_vfiprintf_r+0x254>)
 80031ee:	bb1b      	cbnz	r3, 8003238 <_vfiprintf_r+0x1f8>
 80031f0:	9b03      	ldr	r3, [sp, #12]
 80031f2:	3307      	adds	r3, #7
 80031f4:	f023 0307 	bic.w	r3, r3, #7
 80031f8:	3308      	adds	r3, #8
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031fe:	443b      	add	r3, r7
 8003200:	9309      	str	r3, [sp, #36]	; 0x24
 8003202:	e767      	b.n	80030d4 <_vfiprintf_r+0x94>
 8003204:	fb0c 3202 	mla	r2, ip, r2, r3
 8003208:	460c      	mov	r4, r1
 800320a:	2001      	movs	r0, #1
 800320c:	e7a5      	b.n	800315a <_vfiprintf_r+0x11a>
 800320e:	2300      	movs	r3, #0
 8003210:	3401      	adds	r4, #1
 8003212:	9305      	str	r3, [sp, #20]
 8003214:	4619      	mov	r1, r3
 8003216:	f04f 0c0a 	mov.w	ip, #10
 800321a:	4620      	mov	r0, r4
 800321c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003220:	3a30      	subs	r2, #48	; 0x30
 8003222:	2a09      	cmp	r2, #9
 8003224:	d903      	bls.n	800322e <_vfiprintf_r+0x1ee>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0c5      	beq.n	80031b6 <_vfiprintf_r+0x176>
 800322a:	9105      	str	r1, [sp, #20]
 800322c:	e7c3      	b.n	80031b6 <_vfiprintf_r+0x176>
 800322e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003232:	4604      	mov	r4, r0
 8003234:	2301      	movs	r3, #1
 8003236:	e7f0      	b.n	800321a <_vfiprintf_r+0x1da>
 8003238:	ab03      	add	r3, sp, #12
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	462a      	mov	r2, r5
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <_vfiprintf_r+0x258>)
 8003240:	a904      	add	r1, sp, #16
 8003242:	4630      	mov	r0, r6
 8003244:	f3af 8000 	nop.w
 8003248:	4607      	mov	r7, r0
 800324a:	1c78      	adds	r0, r7, #1
 800324c:	d1d6      	bne.n	80031fc <_vfiprintf_r+0x1bc>
 800324e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003250:	07d9      	lsls	r1, r3, #31
 8003252:	d405      	bmi.n	8003260 <_vfiprintf_r+0x220>
 8003254:	89ab      	ldrh	r3, [r5, #12]
 8003256:	059a      	lsls	r2, r3, #22
 8003258:	d402      	bmi.n	8003260 <_vfiprintf_r+0x220>
 800325a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800325c:	f7ff fe55 	bl	8002f0a <__retarget_lock_release_recursive>
 8003260:	89ab      	ldrh	r3, [r5, #12]
 8003262:	065b      	lsls	r3, r3, #25
 8003264:	f53f af12 	bmi.w	800308c <_vfiprintf_r+0x4c>
 8003268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800326a:	e711      	b.n	8003090 <_vfiprintf_r+0x50>
 800326c:	ab03      	add	r3, sp, #12
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	462a      	mov	r2, r5
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <_vfiprintf_r+0x258>)
 8003274:	a904      	add	r1, sp, #16
 8003276:	4630      	mov	r0, r6
 8003278:	f000 f880 	bl	800337c <_printf_i>
 800327c:	e7e4      	b.n	8003248 <_vfiprintf_r+0x208>
 800327e:	bf00      	nop
 8003280:	080037a8 	.word	0x080037a8
 8003284:	080037c8 	.word	0x080037c8
 8003288:	08003788 	.word	0x08003788
 800328c:	080037e8 	.word	0x080037e8
 8003290:	080037f2 	.word	0x080037f2
 8003294:	00000000 	.word	0x00000000
 8003298:	0800301b 	.word	0x0800301b
 800329c:	080037ee 	.word	0x080037ee

080032a0 <_printf_common>:
 80032a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a4:	4616      	mov	r6, r2
 80032a6:	4699      	mov	r9, r3
 80032a8:	688a      	ldr	r2, [r1, #8]
 80032aa:	690b      	ldr	r3, [r1, #16]
 80032ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bfb8      	it	lt
 80032b4:	4613      	movlt	r3, r2
 80032b6:	6033      	str	r3, [r6, #0]
 80032b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032bc:	4607      	mov	r7, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	b10a      	cbz	r2, 80032c6 <_printf_common+0x26>
 80032c2:	3301      	adds	r3, #1
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	0699      	lsls	r1, r3, #26
 80032ca:	bf42      	ittt	mi
 80032cc:	6833      	ldrmi	r3, [r6, #0]
 80032ce:	3302      	addmi	r3, #2
 80032d0:	6033      	strmi	r3, [r6, #0]
 80032d2:	6825      	ldr	r5, [r4, #0]
 80032d4:	f015 0506 	ands.w	r5, r5, #6
 80032d8:	d106      	bne.n	80032e8 <_printf_common+0x48>
 80032da:	f104 0a19 	add.w	sl, r4, #25
 80032de:	68e3      	ldr	r3, [r4, #12]
 80032e0:	6832      	ldr	r2, [r6, #0]
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	42ab      	cmp	r3, r5
 80032e6:	dc26      	bgt.n	8003336 <_printf_common+0x96>
 80032e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032ec:	1e13      	subs	r3, r2, #0
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	bf18      	it	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	0692      	lsls	r2, r2, #26
 80032f6:	d42b      	bmi.n	8003350 <_printf_common+0xb0>
 80032f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032fc:	4649      	mov	r1, r9
 80032fe:	4638      	mov	r0, r7
 8003300:	47c0      	blx	r8
 8003302:	3001      	adds	r0, #1
 8003304:	d01e      	beq.n	8003344 <_printf_common+0xa4>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	68e5      	ldr	r5, [r4, #12]
 800330a:	6832      	ldr	r2, [r6, #0]
 800330c:	f003 0306 	and.w	r3, r3, #6
 8003310:	2b04      	cmp	r3, #4
 8003312:	bf08      	it	eq
 8003314:	1aad      	subeq	r5, r5, r2
 8003316:	68a3      	ldr	r3, [r4, #8]
 8003318:	6922      	ldr	r2, [r4, #16]
 800331a:	bf0c      	ite	eq
 800331c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003320:	2500      	movne	r5, #0
 8003322:	4293      	cmp	r3, r2
 8003324:	bfc4      	itt	gt
 8003326:	1a9b      	subgt	r3, r3, r2
 8003328:	18ed      	addgt	r5, r5, r3
 800332a:	2600      	movs	r6, #0
 800332c:	341a      	adds	r4, #26
 800332e:	42b5      	cmp	r5, r6
 8003330:	d11a      	bne.n	8003368 <_printf_common+0xc8>
 8003332:	2000      	movs	r0, #0
 8003334:	e008      	b.n	8003348 <_printf_common+0xa8>
 8003336:	2301      	movs	r3, #1
 8003338:	4652      	mov	r2, sl
 800333a:	4649      	mov	r1, r9
 800333c:	4638      	mov	r0, r7
 800333e:	47c0      	blx	r8
 8003340:	3001      	adds	r0, #1
 8003342:	d103      	bne.n	800334c <_printf_common+0xac>
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334c:	3501      	adds	r5, #1
 800334e:	e7c6      	b.n	80032de <_printf_common+0x3e>
 8003350:	18e1      	adds	r1, r4, r3
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	2030      	movs	r0, #48	; 0x30
 8003356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800335a:	4422      	add	r2, r4
 800335c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003364:	3302      	adds	r3, #2
 8003366:	e7c7      	b.n	80032f8 <_printf_common+0x58>
 8003368:	2301      	movs	r3, #1
 800336a:	4622      	mov	r2, r4
 800336c:	4649      	mov	r1, r9
 800336e:	4638      	mov	r0, r7
 8003370:	47c0      	blx	r8
 8003372:	3001      	adds	r0, #1
 8003374:	d0e6      	beq.n	8003344 <_printf_common+0xa4>
 8003376:	3601      	adds	r6, #1
 8003378:	e7d9      	b.n	800332e <_printf_common+0x8e>
	...

0800337c <_printf_i>:
 800337c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	460c      	mov	r4, r1
 8003382:	4691      	mov	r9, r2
 8003384:	7e27      	ldrb	r7, [r4, #24]
 8003386:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003388:	2f78      	cmp	r7, #120	; 0x78
 800338a:	4680      	mov	r8, r0
 800338c:	469a      	mov	sl, r3
 800338e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003392:	d807      	bhi.n	80033a4 <_printf_i+0x28>
 8003394:	2f62      	cmp	r7, #98	; 0x62
 8003396:	d80a      	bhi.n	80033ae <_printf_i+0x32>
 8003398:	2f00      	cmp	r7, #0
 800339a:	f000 80d8 	beq.w	800354e <_printf_i+0x1d2>
 800339e:	2f58      	cmp	r7, #88	; 0x58
 80033a0:	f000 80a3 	beq.w	80034ea <_printf_i+0x16e>
 80033a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033ac:	e03a      	b.n	8003424 <_printf_i+0xa8>
 80033ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033b2:	2b15      	cmp	r3, #21
 80033b4:	d8f6      	bhi.n	80033a4 <_printf_i+0x28>
 80033b6:	a001      	add	r0, pc, #4	; (adr r0, 80033bc <_printf_i+0x40>)
 80033b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033bc:	08003415 	.word	0x08003415
 80033c0:	08003429 	.word	0x08003429
 80033c4:	080033a5 	.word	0x080033a5
 80033c8:	080033a5 	.word	0x080033a5
 80033cc:	080033a5 	.word	0x080033a5
 80033d0:	080033a5 	.word	0x080033a5
 80033d4:	08003429 	.word	0x08003429
 80033d8:	080033a5 	.word	0x080033a5
 80033dc:	080033a5 	.word	0x080033a5
 80033e0:	080033a5 	.word	0x080033a5
 80033e4:	080033a5 	.word	0x080033a5
 80033e8:	08003535 	.word	0x08003535
 80033ec:	08003459 	.word	0x08003459
 80033f0:	08003517 	.word	0x08003517
 80033f4:	080033a5 	.word	0x080033a5
 80033f8:	080033a5 	.word	0x080033a5
 80033fc:	08003557 	.word	0x08003557
 8003400:	080033a5 	.word	0x080033a5
 8003404:	08003459 	.word	0x08003459
 8003408:	080033a5 	.word	0x080033a5
 800340c:	080033a5 	.word	0x080033a5
 8003410:	0800351f 	.word	0x0800351f
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	1d1a      	adds	r2, r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	600a      	str	r2, [r1, #0]
 800341c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003424:	2301      	movs	r3, #1
 8003426:	e0a3      	b.n	8003570 <_printf_i+0x1f4>
 8003428:	6825      	ldr	r5, [r4, #0]
 800342a:	6808      	ldr	r0, [r1, #0]
 800342c:	062e      	lsls	r6, r5, #24
 800342e:	f100 0304 	add.w	r3, r0, #4
 8003432:	d50a      	bpl.n	800344a <_printf_i+0xce>
 8003434:	6805      	ldr	r5, [r0, #0]
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	2d00      	cmp	r5, #0
 800343a:	da03      	bge.n	8003444 <_printf_i+0xc8>
 800343c:	232d      	movs	r3, #45	; 0x2d
 800343e:	426d      	negs	r5, r5
 8003440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003444:	485e      	ldr	r0, [pc, #376]	; (80035c0 <_printf_i+0x244>)
 8003446:	230a      	movs	r3, #10
 8003448:	e019      	b.n	800347e <_printf_i+0x102>
 800344a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800344e:	6805      	ldr	r5, [r0, #0]
 8003450:	600b      	str	r3, [r1, #0]
 8003452:	bf18      	it	ne
 8003454:	b22d      	sxthne	r5, r5
 8003456:	e7ef      	b.n	8003438 <_printf_i+0xbc>
 8003458:	680b      	ldr	r3, [r1, #0]
 800345a:	6825      	ldr	r5, [r4, #0]
 800345c:	1d18      	adds	r0, r3, #4
 800345e:	6008      	str	r0, [r1, #0]
 8003460:	0628      	lsls	r0, r5, #24
 8003462:	d501      	bpl.n	8003468 <_printf_i+0xec>
 8003464:	681d      	ldr	r5, [r3, #0]
 8003466:	e002      	b.n	800346e <_printf_i+0xf2>
 8003468:	0669      	lsls	r1, r5, #25
 800346a:	d5fb      	bpl.n	8003464 <_printf_i+0xe8>
 800346c:	881d      	ldrh	r5, [r3, #0]
 800346e:	4854      	ldr	r0, [pc, #336]	; (80035c0 <_printf_i+0x244>)
 8003470:	2f6f      	cmp	r7, #111	; 0x6f
 8003472:	bf0c      	ite	eq
 8003474:	2308      	moveq	r3, #8
 8003476:	230a      	movne	r3, #10
 8003478:	2100      	movs	r1, #0
 800347a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800347e:	6866      	ldr	r6, [r4, #4]
 8003480:	60a6      	str	r6, [r4, #8]
 8003482:	2e00      	cmp	r6, #0
 8003484:	bfa2      	ittt	ge
 8003486:	6821      	ldrge	r1, [r4, #0]
 8003488:	f021 0104 	bicge.w	r1, r1, #4
 800348c:	6021      	strge	r1, [r4, #0]
 800348e:	b90d      	cbnz	r5, 8003494 <_printf_i+0x118>
 8003490:	2e00      	cmp	r6, #0
 8003492:	d04d      	beq.n	8003530 <_printf_i+0x1b4>
 8003494:	4616      	mov	r6, r2
 8003496:	fbb5 f1f3 	udiv	r1, r5, r3
 800349a:	fb03 5711 	mls	r7, r3, r1, r5
 800349e:	5dc7      	ldrb	r7, [r0, r7]
 80034a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034a4:	462f      	mov	r7, r5
 80034a6:	42bb      	cmp	r3, r7
 80034a8:	460d      	mov	r5, r1
 80034aa:	d9f4      	bls.n	8003496 <_printf_i+0x11a>
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d10b      	bne.n	80034c8 <_printf_i+0x14c>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	07df      	lsls	r7, r3, #31
 80034b4:	d508      	bpl.n	80034c8 <_printf_i+0x14c>
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	6861      	ldr	r1, [r4, #4]
 80034ba:	4299      	cmp	r1, r3
 80034bc:	bfde      	ittt	le
 80034be:	2330      	movle	r3, #48	; 0x30
 80034c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034c8:	1b92      	subs	r2, r2, r6
 80034ca:	6122      	str	r2, [r4, #16]
 80034cc:	f8cd a000 	str.w	sl, [sp]
 80034d0:	464b      	mov	r3, r9
 80034d2:	aa03      	add	r2, sp, #12
 80034d4:	4621      	mov	r1, r4
 80034d6:	4640      	mov	r0, r8
 80034d8:	f7ff fee2 	bl	80032a0 <_printf_common>
 80034dc:	3001      	adds	r0, #1
 80034de:	d14c      	bne.n	800357a <_printf_i+0x1fe>
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	b004      	add	sp, #16
 80034e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ea:	4835      	ldr	r0, [pc, #212]	; (80035c0 <_printf_i+0x244>)
 80034ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	680e      	ldr	r6, [r1, #0]
 80034f4:	061f      	lsls	r7, r3, #24
 80034f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80034fa:	600e      	str	r6, [r1, #0]
 80034fc:	d514      	bpl.n	8003528 <_printf_i+0x1ac>
 80034fe:	07d9      	lsls	r1, r3, #31
 8003500:	bf44      	itt	mi
 8003502:	f043 0320 	orrmi.w	r3, r3, #32
 8003506:	6023      	strmi	r3, [r4, #0]
 8003508:	b91d      	cbnz	r5, 8003512 <_printf_i+0x196>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f023 0320 	bic.w	r3, r3, #32
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	2310      	movs	r3, #16
 8003514:	e7b0      	b.n	8003478 <_printf_i+0xfc>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	f043 0320 	orr.w	r3, r3, #32
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	2378      	movs	r3, #120	; 0x78
 8003520:	4828      	ldr	r0, [pc, #160]	; (80035c4 <_printf_i+0x248>)
 8003522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003526:	e7e3      	b.n	80034f0 <_printf_i+0x174>
 8003528:	065e      	lsls	r6, r3, #25
 800352a:	bf48      	it	mi
 800352c:	b2ad      	uxthmi	r5, r5
 800352e:	e7e6      	b.n	80034fe <_printf_i+0x182>
 8003530:	4616      	mov	r6, r2
 8003532:	e7bb      	b.n	80034ac <_printf_i+0x130>
 8003534:	680b      	ldr	r3, [r1, #0]
 8003536:	6826      	ldr	r6, [r4, #0]
 8003538:	6960      	ldr	r0, [r4, #20]
 800353a:	1d1d      	adds	r5, r3, #4
 800353c:	600d      	str	r5, [r1, #0]
 800353e:	0635      	lsls	r5, r6, #24
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	d501      	bpl.n	8003548 <_printf_i+0x1cc>
 8003544:	6018      	str	r0, [r3, #0]
 8003546:	e002      	b.n	800354e <_printf_i+0x1d2>
 8003548:	0671      	lsls	r1, r6, #25
 800354a:	d5fb      	bpl.n	8003544 <_printf_i+0x1c8>
 800354c:	8018      	strh	r0, [r3, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	6123      	str	r3, [r4, #16]
 8003552:	4616      	mov	r6, r2
 8003554:	e7ba      	b.n	80034cc <_printf_i+0x150>
 8003556:	680b      	ldr	r3, [r1, #0]
 8003558:	1d1a      	adds	r2, r3, #4
 800355a:	600a      	str	r2, [r1, #0]
 800355c:	681e      	ldr	r6, [r3, #0]
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	2100      	movs	r1, #0
 8003562:	4630      	mov	r0, r6
 8003564:	f7fc fe54 	bl	8000210 <memchr>
 8003568:	b108      	cbz	r0, 800356e <_printf_i+0x1f2>
 800356a:	1b80      	subs	r0, r0, r6
 800356c:	6060      	str	r0, [r4, #4]
 800356e:	6863      	ldr	r3, [r4, #4]
 8003570:	6123      	str	r3, [r4, #16]
 8003572:	2300      	movs	r3, #0
 8003574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003578:	e7a8      	b.n	80034cc <_printf_i+0x150>
 800357a:	6923      	ldr	r3, [r4, #16]
 800357c:	4632      	mov	r2, r6
 800357e:	4649      	mov	r1, r9
 8003580:	4640      	mov	r0, r8
 8003582:	47d0      	blx	sl
 8003584:	3001      	adds	r0, #1
 8003586:	d0ab      	beq.n	80034e0 <_printf_i+0x164>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	079b      	lsls	r3, r3, #30
 800358c:	d413      	bmi.n	80035b6 <_printf_i+0x23a>
 800358e:	68e0      	ldr	r0, [r4, #12]
 8003590:	9b03      	ldr	r3, [sp, #12]
 8003592:	4298      	cmp	r0, r3
 8003594:	bfb8      	it	lt
 8003596:	4618      	movlt	r0, r3
 8003598:	e7a4      	b.n	80034e4 <_printf_i+0x168>
 800359a:	2301      	movs	r3, #1
 800359c:	4632      	mov	r2, r6
 800359e:	4649      	mov	r1, r9
 80035a0:	4640      	mov	r0, r8
 80035a2:	47d0      	blx	sl
 80035a4:	3001      	adds	r0, #1
 80035a6:	d09b      	beq.n	80034e0 <_printf_i+0x164>
 80035a8:	3501      	adds	r5, #1
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	9903      	ldr	r1, [sp, #12]
 80035ae:	1a5b      	subs	r3, r3, r1
 80035b0:	42ab      	cmp	r3, r5
 80035b2:	dcf2      	bgt.n	800359a <_printf_i+0x21e>
 80035b4:	e7eb      	b.n	800358e <_printf_i+0x212>
 80035b6:	2500      	movs	r5, #0
 80035b8:	f104 0619 	add.w	r6, r4, #25
 80035bc:	e7f5      	b.n	80035aa <_printf_i+0x22e>
 80035be:	bf00      	nop
 80035c0:	080037f9 	.word	0x080037f9
 80035c4:	0800380a 	.word	0x0800380a

080035c8 <__sread>:
 80035c8:	b510      	push	{r4, lr}
 80035ca:	460c      	mov	r4, r1
 80035cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d0:	f000 f894 	bl	80036fc <_read_r>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	bfab      	itete	ge
 80035d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035da:	89a3      	ldrhlt	r3, [r4, #12]
 80035dc:	181b      	addge	r3, r3, r0
 80035de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035e2:	bfac      	ite	ge
 80035e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035e6:	81a3      	strhlt	r3, [r4, #12]
 80035e8:	bd10      	pop	{r4, pc}

080035ea <__swrite>:
 80035ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ee:	461f      	mov	r7, r3
 80035f0:	898b      	ldrh	r3, [r1, #12]
 80035f2:	05db      	lsls	r3, r3, #23
 80035f4:	4605      	mov	r5, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	4616      	mov	r6, r2
 80035fa:	d505      	bpl.n	8003608 <__swrite+0x1e>
 80035fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003600:	2302      	movs	r3, #2
 8003602:	2200      	movs	r2, #0
 8003604:	f000 f868 	bl	80036d8 <_lseek_r>
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800360e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	4632      	mov	r2, r6
 8003616:	463b      	mov	r3, r7
 8003618:	4628      	mov	r0, r5
 800361a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361e:	f000 b817 	b.w	8003650 <_write_r>

08003622 <__sseek>:
 8003622:	b510      	push	{r4, lr}
 8003624:	460c      	mov	r4, r1
 8003626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800362a:	f000 f855 	bl	80036d8 <_lseek_r>
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	bf15      	itete	ne
 8003634:	6560      	strne	r0, [r4, #84]	; 0x54
 8003636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800363a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800363e:	81a3      	strheq	r3, [r4, #12]
 8003640:	bf18      	it	ne
 8003642:	81a3      	strhne	r3, [r4, #12]
 8003644:	bd10      	pop	{r4, pc}

08003646 <__sclose>:
 8003646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800364a:	f000 b813 	b.w	8003674 <_close_r>
	...

08003650 <_write_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4d07      	ldr	r5, [pc, #28]	; (8003670 <_write_r+0x20>)
 8003654:	4604      	mov	r4, r0
 8003656:	4608      	mov	r0, r1
 8003658:	4611      	mov	r1, r2
 800365a:	2200      	movs	r2, #0
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd fc0f 	bl	8000e82 <_write>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_write_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_write_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	200000ec 	.word	0x200000ec

08003674 <_close_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4d06      	ldr	r5, [pc, #24]	; (8003690 <_close_r+0x1c>)
 8003678:	2300      	movs	r3, #0
 800367a:	4604      	mov	r4, r0
 800367c:	4608      	mov	r0, r1
 800367e:	602b      	str	r3, [r5, #0]
 8003680:	f7fd fc1b 	bl	8000eba <_close>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d102      	bne.n	800368e <_close_r+0x1a>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	b103      	cbz	r3, 800368e <_close_r+0x1a>
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	200000ec 	.word	0x200000ec

08003694 <_fstat_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4d07      	ldr	r5, [pc, #28]	; (80036b4 <_fstat_r+0x20>)
 8003698:	2300      	movs	r3, #0
 800369a:	4604      	mov	r4, r0
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	f7fd fc16 	bl	8000ed2 <_fstat>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d102      	bne.n	80036b0 <_fstat_r+0x1c>
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	b103      	cbz	r3, 80036b0 <_fstat_r+0x1c>
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	bd38      	pop	{r3, r4, r5, pc}
 80036b2:	bf00      	nop
 80036b4:	200000ec 	.word	0x200000ec

080036b8 <_isatty_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4d06      	ldr	r5, [pc, #24]	; (80036d4 <_isatty_r+0x1c>)
 80036bc:	2300      	movs	r3, #0
 80036be:	4604      	mov	r4, r0
 80036c0:	4608      	mov	r0, r1
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	f7fd fc15 	bl	8000ef2 <_isatty>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_isatty_r+0x1a>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_isatty_r+0x1a>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200000ec 	.word	0x200000ec

080036d8 <_lseek_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d07      	ldr	r5, [pc, #28]	; (80036f8 <_lseek_r+0x20>)
 80036dc:	4604      	mov	r4, r0
 80036de:	4608      	mov	r0, r1
 80036e0:	4611      	mov	r1, r2
 80036e2:	2200      	movs	r2, #0
 80036e4:	602a      	str	r2, [r5, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7fd fc0e 	bl	8000f08 <_lseek>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_lseek_r+0x1e>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_lseek_r+0x1e>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	200000ec 	.word	0x200000ec

080036fc <_read_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d07      	ldr	r5, [pc, #28]	; (800371c <_read_r+0x20>)
 8003700:	4604      	mov	r4, r0
 8003702:	4608      	mov	r0, r1
 8003704:	4611      	mov	r1, r2
 8003706:	2200      	movs	r2, #0
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7fd fb9c 	bl	8000e48 <_read>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_read_r+0x1e>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_read_r+0x1e>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	200000ec 	.word	0x200000ec

08003720 <_init>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr

0800372c <_fini>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	bf00      	nop
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr
